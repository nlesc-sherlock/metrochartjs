{
"node_modules/browserify/node_modules/browser-pack/_prelude.js":{"path":"node_modules/browserify/node_modules/browser-pack/_prelude.js","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}}},"branchMap":{"1":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}]}},"s":{"1":37},"b":{"1":[10,7]},"f":{"1":12},"code":"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","l":{"1":37}},
"src/main.ts":{"path":"src/main.ts","statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":40}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":50}}},"fnMap":{},"branchMap":{},"s":{"1":1,"2":1,"3":1,"4":1},"b":{},"f":{},"code":"/**\r\n * MetroChart module\r\n */\r\n\r\n\r\nexport {MetroChart} from './metrochart';\r\nexport {MetroChartData} from './metrochartdata';\r\nexport {MetroChartError} from './metrocharterror';\r\nexport {MetroLine} from './metroline';\r\nexport {Options} from './options';\r\nexport {Station} from './station';\r\n\r\n","l":{"6":1,"8":1}},
"src/metrochart.ts":{"path":"src/metrochart.ts","statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":12}},"3":{"start":{"line":27,"column":0},"end":{"line":1187,"column":1}},"4":{"start":{"line":228,"column":4},"end":{"line":255,"column":5}},"5":{"start":{"line":231,"column":8},"end":{"line":231,"column":25}},"6":{"start":{"line":234,"column":8},"end":{"line":234,"column":24}},"7":{"start":{"line":237,"column":8},"end":{"line":237,"column":50}},"8":{"start":{"line":242,"column":8},"end":{"line":242,"column":47}},"9":{"start":{"line":243,"column":8},"end":{"line":243,"column":83}},"10":{"start":{"line":244,"column":8},"end":{"line":244,"column":84}},"11":{"start":{"line":246,"column":8},"end":{"line":250,"column":9}},"12":{"start":{"line":247,"column":12},"end":{"line":247,"column":64}},"13":{"start":{"line":249,"column":12},"end":{"line":249,"column":46}},"14":{"start":{"line":253,"column":8},"end":{"line":253,"column":24}},"15":{"start":{"line":265,"column":11},"end":{"line":373,"column":5}},"16":{"start":{"line":268,"column":8},"end":{"line":268,"column":29}},"17":{"start":{"line":269,"column":8},"end":{"line":269,"column":20}},"18":{"start":{"line":270,"column":8},"end":{"line":280,"column":9}},"19":{"start":{"line":272,"column":12},"end":{"line":274,"column":13}},"20":{"start":{"line":272,"column":17},"end":{"line":272,"column":26}},"21":{"start":{"line":273,"column":16},"end":{"line":273,"column":43}},"22":{"start":{"line":277,"column":12},"end":{"line":279,"column":13}},"23":{"start":{"line":277,"column":17},"end":{"line":277,"column":26}},"24":{"start":{"line":278,"column":16},"end":{"line":278,"column":43}},"25":{"start":{"line":281,"column":8},"end":{"line":281,"column":29}},"26":{"start":{"line":285,"column":8},"end":{"line":291,"column":9}},"27":{"start":{"line":287,"column":12},"end":{"line":287,"column":59}},"28":{"start":{"line":290,"column":12},"end":{"line":290,"column":41}},"29":{"start":{"line":295,"column":8},"end":{"line":301,"column":9}},"30":{"start":{"line":297,"column":12},"end":{"line":297,"column":61}},"31":{"start":{"line":300,"column":12},"end":{"line":300,"column":43}},"32":{"start":{"line":305,"column":8},"end":{"line":311,"column":9}},"33":{"start":{"line":307,"column":12},"end":{"line":307,"column":71}},"34":{"start":{"line":310,"column":12},"end":{"line":310,"column":53}},"35":{"start":{"line":315,"column":8},"end":{"line":321,"column":9}},"36":{"start":{"line":317,"column":12},"end":{"line":317,"column":71}},"37":{"start":{"line":320,"column":12},"end":{"line":320,"column":53}},"38":{"start":{"line":325,"column":8},"end":{"line":331,"column":9}},"39":{"start":{"line":327,"column":12},"end":{"line":327,"column":75}},"40":{"start":{"line":330,"column":12},"end":{"line":330,"column":57}},"41":{"start":{"line":335,"column":8},"end":{"line":341,"column":9}},"42":{"start":{"line":337,"column":12},"end":{"line":337,"column":83}},"43":{"start":{"line":340,"column":12},"end":{"line":340,"column":65}},"44":{"start":{"line":344,"column":8},"end":{"line":350,"column":9}},"45":{"start":{"line":346,"column":12},"end":{"line":346,"column":75}},"46":{"start":{"line":349,"column":12},"end":{"line":349,"column":57}},"47":{"start":{"line":353,"column":8},"end":{"line":359,"column":9}},"48":{"start":{"line":355,"column":12},"end":{"line":355,"column":73}},"49":{"start":{"line":358,"column":12},"end":{"line":358,"column":55}},"50":{"start":{"line":362,"column":8},"end":{"line":368,"column":9}},"51":{"start":{"line":364,"column":12},"end":{"line":364,"column":61}},"52":{"start":{"line":367,"column":12},"end":{"line":367,"column":43}},"53":{"start":{"line":372,"column":8},"end":{"line":372,"column":20}},"54":{"start":{"line":388,"column":12},"end":{"line":428,"column":5}},"55":{"start":{"line":391,"column":8},"end":{"line":391,"column":28}},"56":{"start":{"line":399,"column":8},"end":{"line":411,"column":9}},"57":{"start":{"line":402,"column":12},"end":{"line":402,"column":43}},"58":{"start":{"line":404,"column":12},"end":{"line":404,"column":81}},"59":{"start":{"line":406,"column":12},"end":{"line":406,"column":45}},"60":{"start":{"line":410,"column":12},"end":{"line":410,"column":27}},"61":{"start":{"line":412,"column":8},"end":{"line":424,"column":9}},"62":{"start":{"line":415,"column":12},"end":{"line":415,"column":43}},"63":{"start":{"line":417,"column":12},"end":{"line":417,"column":81}},"64":{"start":{"line":419,"column":12},"end":{"line":419,"column":39}},"65":{"start":{"line":423,"column":12},"end":{"line":423,"column":28}},"66":{"start":{"line":426,"column":8},"end":{"line":426,"column":19}},"67":{"start":{"line":446,"column":4},"end":{"line":459,"column":5}},"68":{"start":{"line":448,"column":8},"end":{"line":448,"column":50}},"69":{"start":{"line":449,"column":8},"end":{"line":449,"column":58}},"70":{"start":{"line":451,"column":8},"end":{"line":451,"column":48}},"71":{"start":{"line":452,"column":8},"end":{"line":452,"column":54}},"72":{"start":{"line":454,"column":8},"end":{"line":458,"column":9}},"73":{"start":{"line":455,"column":12},"end":{"line":455,"column":25}},"74":{"start":{"line":457,"column":12},"end":{"line":457,"column":28}},"75":{"start":{"line":483,"column":4},"end":{"line":502,"column":5}},"76":{"start":{"line":485,"column":8},"end":{"line":485,"column":50}},"77":{"start":{"line":486,"column":8},"end":{"line":486,"column":58}},"78":{"start":{"line":490,"column":8},"end":{"line":490,"column":51}},"79":{"start":{"line":492,"column":8},"end":{"line":492,"column":68}},"80":{"start":{"line":495,"column":8},"end":{"line":501,"column":9}},"81":{"start":{"line":496,"column":12},"end":{"line":496,"column":110}},"82":{"start":{"line":497,"column":15},"end":{"line":501,"column":9}},"83":{"start":{"line":498,"column":12},"end":{"line":498,"column":113}},"84":{"start":{"line":500,"column":12},"end":{"line":500,"column":65}},"85":{"start":{"line":516,"column":12},"end":{"line":586,"column":5}},"86":{"start":{"line":536,"column":8},"end":{"line":567,"column":10}},"87":{"start":{"line":538,"column":12},"end":{"line":538,"column":33}},"88":{"start":{"line":539,"column":12},"end":{"line":539,"column":34}},"89":{"start":{"line":540,"column":12},"end":{"line":540,"column":33}},"90":{"start":{"line":541,"column":12},"end":{"line":541,"column":30}},"91":{"start":{"line":542,"column":12},"end":{"line":542,"column":27}},"92":{"start":{"line":543,"column":12},"end":{"line":543,"column":27}},"93":{"start":{"line":545,"column":12},"end":{"line":545,"column":26}},"94":{"start":{"line":546,"column":12},"end":{"line":546,"column":27}},"95":{"start":{"line":548,"column":12},"end":{"line":566,"column":13}},"96":{"start":{"line":549,"column":16},"end":{"line":554,"column":17}},"97":{"start":{"line":550,"column":20},"end":{"line":550,"column":73}},"98":{"start":{"line":551,"column":20},"end":{"line":551,"column":45}},"99":{"start":{"line":552,"column":20},"end":{"line":552,"column":46}},"100":{"start":{"line":553,"column":20},"end":{"line":553,"column":72}},"101":{"start":{"line":555,"column":16},"end":{"line":555,"column":33}},"102":{"start":{"line":556,"column":19},"end":{"line":566,"column":13}},"103":{"start":{"line":557,"column":16},"end":{"line":562,"column":21}},"104":{"start":{"line":558,"column":20},"end":{"line":558,"column":61}},"105":{"start":{"line":559,"column":20},"end":{"line":559,"column":45}},"106":{"start":{"line":560,"column":20},"end":{"line":560,"column":45}},"107":{"start":{"line":561,"column":20},"end":{"line":561,"column":72}},"108":{"start":{"line":563,"column":16},"end":{"line":563,"column":33}},"109":{"start":{"line":565,"column":16},"end":{"line":565,"column":133}},"110":{"start":{"line":574,"column":8},"end":{"line":574,"column":49}},"111":{"start":{"line":576,"column":8},"end":{"line":576,"column":63}},"112":{"start":{"line":578,"column":8},"end":{"line":584,"column":30}},"113":{"start":{"line":585,"column":9},"end":{"line":585,"column":20}},"114":{"start":{"line":601,"column":12},"end":{"line":617,"column":5}},"115":{"start":{"line":605,"column":8},"end":{"line":610,"column":9}},"116":{"start":{"line":607,"column":12},"end":{"line":607,"column":106}},"117":{"start":{"line":609,"column":12},"end":{"line":609,"column":95}},"118":{"start":{"line":613,"column":8},"end":{"line":613,"column":45}},"119":{"start":{"line":615,"column":8},"end":{"line":615,"column":58}},"120":{"start":{"line":635,"column":12},"end":{"line":657,"column":5}},"121":{"start":{"line":638,"column":8},"end":{"line":638,"column":30}},"122":{"start":{"line":639,"column":8},"end":{"line":639,"column":31}},"123":{"start":{"line":640,"column":8},"end":{"line":640,"column":27}},"124":{"start":{"line":642,"column":8},"end":{"line":653,"column":9}},"125":{"start":{"line":643,"column":12},"end":{"line":643,"column":68}},"126":{"start":{"line":644,"column":12},"end":{"line":644,"column":42}},"127":{"start":{"line":645,"column":12},"end":{"line":645,"column":57}},"128":{"start":{"line":646,"column":15},"end":{"line":653,"column":9}},"129":{"start":{"line":647,"column":12},"end":{"line":647,"column":68}},"130":{"start":{"line":648,"column":12},"end":{"line":648,"column":42}},"131":{"start":{"line":649,"column":12},"end":{"line":649,"column":57}},"132":{"start":{"line":651,"column":12},"end":{"line":652,"column":78}},"133":{"start":{"line":654,"column":8},"end":{"line":654,"column":131}},"134":{"start":{"line":655,"column":8},"end":{"line":655,"column":26}},"135":{"start":{"line":665,"column":12},"end":{"line":681,"column":5}},"136":{"start":{"line":667,"column":8},"end":{"line":667,"column":25}},"137":{"start":{"line":670,"column":8},"end":{"line":674,"column":9}},"138":{"start":{"line":670,"column":13},"end":{"line":670,"column":21}},"139":{"start":{"line":671,"column":12},"end":{"line":673,"column":13}},"140":{"start":{"line":672,"column":16},"end":{"line":672,"column":44}},"141":{"start":{"line":676,"column":8},"end":{"line":676,"column":27}},"142":{"start":{"line":678,"column":8},"end":{"line":680,"column":9}},"143":{"start":{"line":678,"column":13},"end":{"line":678,"column":21}},"144":{"start":{"line":679,"column":12},"end":{"line":679,"column":57}},"145":{"start":{"line":696,"column":4},"end":{"line":719,"column":5}},"146":{"start":{"line":698,"column":8},"end":{"line":698,"column":43}},"147":{"start":{"line":699,"column":8},"end":{"line":699,"column":32}},"148":{"start":{"line":700,"column":8},"end":{"line":700,"column":40}},"149":{"start":{"line":702,"column":8},"end":{"line":702,"column":48}},"150":{"start":{"line":703,"column":8},"end":{"line":703,"column":54}},"151":{"start":{"line":706,"column":8},"end":{"line":706,"column":51}},"152":{"start":{"line":708,"column":8},"end":{"line":708,"column":81}},"153":{"start":{"line":710,"column":8},"end":{"line":710,"column":32}},"154":{"start":{"line":712,"column":8},"end":{"line":718,"column":9}},"155":{"start":{"line":713,"column":12},"end":{"line":714,"column":65}},"156":{"start":{"line":716,"column":12},"end":{"line":717,"column":68}},"157":{"start":{"line":728,"column":11},"end":{"line":920,"column":5}},"158":{"start":{"line":731,"column":8},"end":{"line":741,"column":10}},"159":{"start":{"line":738,"column":12},"end":{"line":738,"column":80}},"160":{"start":{"line":740,"column":12},"end":{"line":740,"column":49}},"161":{"start":{"line":744,"column":8},"end":{"line":763,"column":10}},"162":{"start":{"line":750,"column":12},"end":{"line":750,"column":80}},"163":{"start":{"line":753,"column":12},"end":{"line":753,"column":48}},"164":{"start":{"line":757,"column":12},"end":{"line":761,"column":15}},"165":{"start":{"line":758,"column":16},"end":{"line":760,"column":17}},"166":{"start":{"line":759,"column":20},"end":{"line":759,"column":54}},"167":{"start":{"line":766,"column":8},"end":{"line":772,"column":10}},"168":{"start":{"line":769,"column":12},"end":{"line":769,"column":71}},"169":{"start":{"line":770,"column":12},"end":{"line":770,"column":50}},"170":{"start":{"line":771,"column":12},"end":{"line":771,"column":64}},"171":{"start":{"line":775,"column":8},"end":{"line":781,"column":10}},"172":{"start":{"line":778,"column":12},"end":{"line":778,"column":71}},"173":{"start":{"line":779,"column":12},"end":{"line":779,"column":50}},"174":{"start":{"line":780,"column":12},"end":{"line":780,"column":63}},"175":{"start":{"line":788,"column":8},"end":{"line":788,"column":24}},"176":{"start":{"line":791,"column":8},"end":{"line":791,"column":46}},"177":{"start":{"line":795,"column":8},"end":{"line":798,"column":36}},"178":{"start":{"line":802,"column":8},"end":{"line":805,"column":31}},"179":{"start":{"line":808,"column":8},"end":{"line":808,"column":34}},"180":{"start":{"line":809,"column":8},"end":{"line":809,"column":36}},"181":{"start":{"line":810,"column":8},"end":{"line":810,"column":46}},"182":{"start":{"line":811,"column":8},"end":{"line":811,"column":46}},"183":{"start":{"line":818,"column":8},"end":{"line":837,"column":19}},"184":{"start":{"line":821,"column":54},"end":{"line":821,"column":94}},"185":{"start":{"line":822,"column":50},"end":{"line":822,"column":79}},"186":{"start":{"line":823,"column":56},"end":{"line":823,"column":87}},"187":{"start":{"line":824,"column":52},"end":{"line":824,"column":95}},"188":{"start":{"line":829,"column":20},"end":{"line":829,"column":43}},"189":{"start":{"line":830,"column":20},"end":{"line":830,"column":54}},"190":{"start":{"line":835,"column":20},"end":{"line":835,"column":43}},"191":{"start":{"line":836,"column":20},"end":{"line":836,"column":53}},"192":{"start":{"line":842,"column":8},"end":{"line":858,"column":15}},"193":{"start":{"line":850,"column":16},"end":{"line":850,"column":39}},"194":{"start":{"line":851,"column":16},"end":{"line":851,"column":50}},"195":{"start":{"line":856,"column":16},"end":{"line":856,"column":39}},"196":{"start":{"line":857,"column":16},"end":{"line":857,"column":49}},"197":{"start":{"line":861,"column":8},"end":{"line":864,"column":57}},"198":{"start":{"line":864,"column":39},"end":{"line":864,"column":53}},"199":{"start":{"line":867,"column":8},"end":{"line":869,"column":80}},"200":{"start":{"line":869,"column":44},"end":{"line":869,"column":76}},"201":{"start":{"line":872,"column":8},"end":{"line":876,"column":34}},"202":{"start":{"line":874,"column":48},"end":{"line":874,"column":80}},"203":{"start":{"line":875,"column":50},"end":{"line":875,"column":113}},"204":{"start":{"line":879,"column":8},"end":{"line":911,"column":11}},"205":{"start":{"line":887,"column":12},"end":{"line":887,"column":96}},"206":{"start":{"line":887,"column":56},"end":{"line":887,"column":92}},"207":{"start":{"line":890,"column":12},"end":{"line":900,"column":19}},"208":{"start":{"line":890,"column":57},"end":{"line":890,"column":91}},"209":{"start":{"line":892,"column":20},"end":{"line":892,"column":74}},"210":{"start":{"line":893,"column":20},"end":{"line":899,"column":21}},"211":{"start":{"line":894,"column":24},"end":{"line":894,"column":39}},"212":{"start":{"line":895,"column":27},"end":{"line":899,"column":21}},"213":{"start":{"line":896,"column":24},"end":{"line":896,"column":37}},"214":{"start":{"line":898,"column":24},"end":{"line":898,"column":77}},"215":{"start":{"line":904,"column":12},"end":{"line":904,"column":85}},"216":{"start":{"line":904,"column":49},"end":{"line":904,"column":81}},"217":{"start":{"line":908,"column":12},"end":{"line":908,"column":83}},"218":{"start":{"line":908,"column":50},"end":{"line":908,"column":79}},"219":{"start":{"line":915,"column":8},"end":{"line":915,"column":22}},"220":{"start":{"line":917,"column":8},"end":{"line":917,"column":20}},"221":{"start":{"line":938,"column":11},"end":{"line":951,"column":5}},"222":{"start":{"line":940,"column":8},"end":{"line":940,"column":23}},"223":{"start":{"line":942,"column":8},"end":{"line":949,"column":9}},"224":{"start":{"line":944,"column":12},"end":{"line":944,"column":28}},"225":{"start":{"line":946,"column":12},"end":{"line":946,"column":52}},"226":{"start":{"line":948,"column":12},"end":{"line":948,"column":48}},"227":{"start":{"line":950,"column":8},"end":{"line":950,"column":19}},"228":{"start":{"line":959,"column":12},"end":{"line":1024,"column":5}},"229":{"start":{"line":963,"column":8},"end":{"line":963,"column":24}},"230":{"start":{"line":965,"column":8},"end":{"line":965,"column":43}},"231":{"start":{"line":968,"column":8},"end":{"line":1015,"column":10}},"232":{"start":{"line":969,"column":12},"end":{"line":972,"column":13}},"233":{"start":{"line":970,"column":16},"end":{"line":971,"column":88}},"234":{"start":{"line":973,"column":12},"end":{"line":1014,"column":13}},"235":{"start":{"line":975,"column":16},"end":{"line":975,"column":65}},"236":{"start":{"line":978,"column":16},"end":{"line":978,"column":40}},"237":{"start":{"line":979,"column":16},"end":{"line":979,"column":40}},"238":{"start":{"line":983,"column":16},"end":{"line":987,"column":17}},"239":{"start":{"line":984,"column":20},"end":{"line":984,"column":44}},"240":{"start":{"line":986,"column":20},"end":{"line":986,"column":52}},"241":{"start":{"line":991,"column":16},"end":{"line":995,"column":17}},"242":{"start":{"line":992,"column":20},"end":{"line":992,"column":50}},"243":{"start":{"line":994,"column":20},"end":{"line":994,"column":58}},"244":{"start":{"line":999,"column":16},"end":{"line":1003,"column":17}},"245":{"start":{"line":1000,"column":20},"end":{"line":1000,"column":48}},"246":{"start":{"line":1002,"column":20},"end":{"line":1002,"column":50}},"247":{"start":{"line":1005,"column":16},"end":{"line":1005,"column":90}},"248":{"start":{"line":1008,"column":16},"end":{"line":1008,"column":39}},"249":{"start":{"line":1010,"column":16},"end":{"line":1010,"column":34}},"250":{"start":{"line":1013,"column":16},"end":{"line":1013,"column":46}},"251":{"start":{"line":1018,"column":8},"end":{"line":1018,"column":45}},"252":{"start":{"line":1021,"column":8},"end":{"line":1021,"column":27}},"253":{"start":{"line":1041,"column":12},"end":{"line":1070,"column":5}},"254":{"start":{"line":1044,"column":8},"end":{"line":1044,"column":49}},"255":{"start":{"line":1046,"column":8},"end":{"line":1046,"column":63}},"256":{"start":{"line":1049,"column":8},"end":{"line":1051,"column":9}},"257":{"start":{"line":1050,"column":12},"end":{"line":1050,"column":54}},"258":{"start":{"line":1054,"column":8},"end":{"line":1056,"column":9}},"259":{"start":{"line":1055,"column":12},"end":{"line":1055,"column":48}},"260":{"start":{"line":1059,"column":8},"end":{"line":1061,"column":9}},"261":{"start":{"line":1060,"column":12},"end":{"line":1060,"column":55}},"262":{"start":{"line":1064,"column":8},"end":{"line":1066,"column":9}},"263":{"start":{"line":1065,"column":12},"end":{"line":1065,"column":50}},"264":{"start":{"line":1068,"column":8},"end":{"line":1068,"column":20}},"265":{"start":{"line":1086,"column":12},"end":{"line":1111,"column":5}},"266":{"start":{"line":1090,"column":8},"end":{"line":1109,"column":9}},"267":{"start":{"line":1090,"column":13},"end":{"line":1090,"column":21}},"268":{"start":{"line":1091,"column":12},"end":{"line":1091,"column":32}},"269":{"start":{"line":1092,"column":12},"end":{"line":1092,"column":32}},"270":{"start":{"line":1093,"column":12},"end":{"line":1093,"column":44}},"271":{"start":{"line":1094,"column":12},"end":{"line":1108,"column":13}},"272":{"start":{"line":1097,"column":16},"end":{"line":1097,"column":68}},"273":{"start":{"line":1098,"column":19},"end":{"line":1108,"column":13}},"274":{"start":{"line":1100,"column":16},"end":{"line":1102,"column":17}},"275":{"start":{"line":1101,"column":20},"end":{"line":1101,"column":51}},"276":{"start":{"line":1103,"column":16},"end":{"line":1105,"column":17}},"277":{"start":{"line":1104,"column":20},"end":{"line":1104,"column":52}},"278":{"start":{"line":1107,"column":16},"end":{"line":1107,"column":106}},"279":{"start":{"line":1110,"column":8},"end":{"line":1110,"column":20}},"280":{"start":{"line":1118,"column":4},"end":{"line":1120,"column":5}},"281":{"start":{"line":1122,"column":8},"end":{"line":1122,"column":28}},"282":{"start":{"line":1119,"column":8},"end":{"line":1119,"column":30}},"283":{"start":{"line":1129,"column":4},"end":{"line":1131,"column":5}},"284":{"start":{"line":1133,"column":8},"end":{"line":1133,"column":36}},"285":{"start":{"line":1130,"column":8},"end":{"line":1130,"column":46}},"286":{"start":{"line":1139,"column":4},"end":{"line":1141,"column":5}},"287":{"start":{"line":1143,"column":8},"end":{"line":1143,"column":28}},"288":{"start":{"line":1140,"column":8},"end":{"line":1140,"column":30}},"289":{"start":{"line":1150,"column":4},"end":{"line":1152,"column":5}},"290":{"start":{"line":1154,"column":8},"end":{"line":1154,"column":34}},"291":{"start":{"line":1151,"column":8},"end":{"line":1151,"column":42}},"292":{"start":{"line":1161,"column":4},"end":{"line":1163,"column":5}},"293":{"start":{"line":1165,"column":8},"end":{"line":1165,"column":29}},"294":{"start":{"line":1162,"column":8},"end":{"line":1162,"column":32}},"295":{"start":{"line":1171,"column":4},"end":{"line":1173,"column":5}},"296":{"start":{"line":1175,"column":8},"end":{"line":1175,"column":34}},"297":{"start":{"line":1172,"column":8},"end":{"line":1172,"column":42}},"298":{"start":{"line":1182,"column":4},"end":{"line":1184,"column":5}},"299":{"start":{"line":1183,"column":8},"end":{"line":1183,"column":25}},"300":{"start":{"line":149,"column":19},"end":{"line":215,"column":6}},"301":{"start":{"line":1187,"column":0},"end":{"line":1187,"column":1}},"302":{"start":{"line":27,"column":13},"end":{"line":1187,"column":1}}},"fnMap":{"1":{"name":"(anonymous_9)","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"MetroChart","line":228,"loc":{"start":{"line":228,"column":4},"end":{"line":228,"column":58}}},"3":{"name":"(anonymous_11)","line":265,"loc":{"start":{"line":265,"column":4},"end":{"line":265,"column":47}}},"4":{"name":"(anonymous_12)","line":388,"loc":{"start":{"line":388,"column":4},"end":{"line":388,"column":41}}},"5":{"name":"(anonymous_13)","line":446,"loc":{"start":{"line":446,"column":4},"end":{"line":446,"column":41}}},"6":{"name":"(anonymous_14)","line":483,"loc":{"start":{"line":483,"column":4},"end":{"line":483,"column":39}}},"7":{"name":"(anonymous_15)","line":516,"loc":{"start":{"line":516,"column":4},"end":{"line":516,"column":42}}},"8":{"name":"(anonymous_16)","line":536,"loc":{"start":{"line":536,"column":34},"end":{"line":536,"column":88}}},"9":{"name":"(anonymous_17)","line":601,"loc":{"start":{"line":601,"column":4},"end":{"line":601,"column":45}}},"10":{"name":"(anonymous_18)","line":635,"loc":{"start":{"line":635,"column":4},"end":{"line":635,"column":68}}},"11":{"name":"(anonymous_19)","line":665,"loc":{"start":{"line":665,"column":4},"end":{"line":null,"column":-1}}},"12":{"name":"(anonymous_20)","line":696,"loc":{"start":{"line":696,"column":4},"end":{"line":696,"column":37}}},"13":{"name":"(anonymous_21)","line":728,"loc":{"start":{"line":728,"column":4},"end":{"line":null,"column":-1}}},"14":{"name":"(anonymous_22)","line":731,"loc":{"start":{"line":731,"column":34},"end":{"line":731,"column":58}}},"15":{"name":"(anonymous_23)","line":744,"loc":{"start":{"line":744,"column":35},"end":{"line":744,"column":59}}},"16":{"name":"(anonymous_24)","line":757,"loc":{"start":{"line":757,"column":51},"end":{"line":null,"column":-1}}},"17":{"name":"(anonymous_25)","line":766,"loc":{"start":{"line":766,"column":34},"end":{"line":766,"column":58}}},"18":{"name":"(anonymous_26)","line":775,"loc":{"start":{"line":775,"column":35},"end":{"line":775,"column":59}}},"19":{"name":"(anonymous_27)","line":821,"loc":{"start":{"line":821,"column":31},"end":{"line":821,"column":51}}},"20":{"name":"(anonymous_28)","line":822,"loc":{"start":{"line":822,"column":27},"end":{"line":822,"column":47}}},"21":{"name":"(anonymous_29)","line":823,"loc":{"start":{"line":823,"column":33},"end":{"line":823,"column":53}}},"22":{"name":"(anonymous_30)","line":824,"loc":{"start":{"line":824,"column":29},"end":{"line":824,"column":49}}},"23":{"name":"(anonymous_31)","line":825,"loc":{"start":{"line":825,"column":33},"end":{"line":null,"column":-1}}},"24":{"name":"(anonymous_32)","line":831,"loc":{"start":{"line":831,"column":32},"end":{"line":null,"column":-1}}},"25":{"name":"(anonymous_33)","line":846,"loc":{"start":{"line":846,"column":29},"end":{"line":null,"column":-1}}},"26":{"name":"(anonymous_34)","line":852,"loc":{"start":{"line":852,"column":28},"end":{"line":null,"column":-1}}},"27":{"name":"(anonymous_35)","line":864,"loc":{"start":{"line":864,"column":18},"end":{"line":864,"column":36}}},"28":{"name":"(anonymous_36)","line":869,"loc":{"start":{"line":869,"column":23},"end":{"line":869,"column":41}}},"29":{"name":"(anonymous_37)","line":874,"loc":{"start":{"line":874,"column":27},"end":{"line":874,"column":45}}},"30":{"name":"(anonymous_38)","line":875,"loc":{"start":{"line":875,"column":29},"end":{"line":875,"column":47}}},"31":{"name":"(anonymous_39)","line":879,"loc":{"start":{"line":879,"column":25},"end":{"line":879,"column":35}}},"32":{"name":"(anonymous_40)","line":887,"loc":{"start":{"line":887,"column":35},"end":{"line":887,"column":53}}},"33":{"name":"(anonymous_41)","line":890,"loc":{"start":{"line":890,"column":36},"end":{"line":890,"column":54}}},"34":{"name":"(anonymous_42)","line":891,"loc":{"start":{"line":891,"column":38},"end":{"line":891,"column":56}}},"35":{"name":"(anonymous_43)","line":904,"loc":{"start":{"line":904,"column":28},"end":{"line":904,"column":46}}},"36":{"name":"(anonymous_44)","line":908,"loc":{"start":{"line":908,"column":27},"end":{"line":908,"column":47}}},"37":{"name":"(anonymous_45)","line":938,"loc":{"start":{"line":938,"column":4},"end":{"line":938,"column":33}}},"38":{"name":"(anonymous_46)","line":959,"loc":{"start":{"line":959,"column":4},"end":{"line":null,"column":-1}}},"39":{"name":"(anonymous_47)","line":968,"loc":{"start":{"line":968,"column":37},"end":{"line":null,"column":-1}}},"40":{"name":"(anonymous_48)","line":1041,"loc":{"start":{"line":1041,"column":4},"end":{"line":1041,"column":43}}},"41":{"name":"(anonymous_49)","line":1086,"loc":{"start":{"line":1086,"column":4},"end":{"line":null,"column":-1}}},"42":{"name":"(anonymous_50)","line":1121,"loc":{"start":{"line":1121,"column":4},"end":{"line":null,"column":-1}}},"43":{"name":"(anonymous_51)","line":1118,"loc":{"start":{"line":1118,"column":4},"end":{"line":1118,"column":38}}},"44":{"name":"(anonymous_52)","line":1132,"loc":{"start":{"line":1132,"column":4},"end":{"line":null,"column":-1}}},"45":{"name":"(anonymous_53)","line":1129,"loc":{"start":{"line":1129,"column":4},"end":{"line":1129,"column":53}}},"46":{"name":"(anonymous_54)","line":1142,"loc":{"start":{"line":1142,"column":4},"end":{"line":null,"column":-1}}},"47":{"name":"(anonymous_55)","line":1139,"loc":{"start":{"line":1139,"column":4},"end":{"line":1139,"column":36}}},"48":{"name":"(anonymous_56)","line":1153,"loc":{"start":{"line":1153,"column":4},"end":{"line":null,"column":-1}}},"49":{"name":"(anonymous_57)","line":1150,"loc":{"start":{"line":1150,"column":4},"end":{"line":1150,"column":48}}},"50":{"name":"(anonymous_58)","line":1164,"loc":{"start":{"line":1164,"column":4},"end":{"line":null,"column":-1}}},"51":{"name":"(anonymous_59)","line":1161,"loc":{"start":{"line":1161,"column":4},"end":{"line":1161,"column":38}}},"52":{"name":"(anonymous_60)","line":1174,"loc":{"start":{"line":1174,"column":4},"end":{"line":null,"column":-1}}},"53":{"name":"(anonymous_61)","line":1171,"loc":{"start":{"line":1171,"column":4},"end":{"line":1171,"column":48}}},"54":{"name":"(anonymous_62)","line":1182,"loc":{"start":{"line":1182,"column":4},"end":{"line":null,"column":-1}}}},"branchMap":{"1":{"line":9,"type":"cond-expr","locations":[{"start":{"line":9,"column":12},"end":{"line":null,"column":-1}},{"start":{"line":9,"column":12},"end":{"line":null,"column":-1}}]},"2":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":8},"end":{"line":246,"column":7}},{"start":{"line":246,"column":8},"end":{"line":246,"column":7}}]},"3":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":8},"end":{"line":270,"column":7}},{"start":{"line":270,"column":8},"end":{"line":270,"column":7}}]},"4":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":8},"end":{"line":285,"column":7}},{"start":{"line":285,"column":8},"end":{"line":285,"column":7}}]},"5":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":8},"end":{"line":295,"column":7}},{"start":{"line":295,"column":8},"end":{"line":295,"column":7}}]},"6":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":7}},{"start":{"line":305,"column":8},"end":{"line":305,"column":7}}]},"7":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":8},"end":{"line":315,"column":7}},{"start":{"line":315,"column":8},"end":{"line":315,"column":7}}]},"8":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":8},"end":{"line":325,"column":7}},{"start":{"line":325,"column":8},"end":{"line":325,"column":7}}]},"9":{"line":335,"type":"if","locations":[{"start":{"line":335,"column":8},"end":{"line":335,"column":7}},{"start":{"line":335,"column":8},"end":{"line":335,"column":7}}]},"10":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":8},"end":{"line":344,"column":7}},{"start":{"line":344,"column":8},"end":{"line":344,"column":7}}]},"11":{"line":353,"type":"if","locations":[{"start":{"line":353,"column":8},"end":{"line":353,"column":7}},{"start":{"line":353,"column":8},"end":{"line":353,"column":7}}]},"12":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":8},"end":{"line":362,"column":7}},{"start":{"line":362,"column":8},"end":{"line":362,"column":7}}]},"13":{"line":399,"type":"if","locations":[{"start":{"line":399,"column":8},"end":{"line":399,"column":7}},{"start":{"line":399,"column":8},"end":{"line":399,"column":7}}]},"14":{"line":412,"type":"if","locations":[{"start":{"line":412,"column":8},"end":{"line":412,"column":7}},{"start":{"line":412,"column":8},"end":{"line":412,"column":7}}]},"15":{"line":454,"type":"if","locations":[{"start":{"line":454,"column":8},"end":{"line":454,"column":7}},{"start":{"line":454,"column":8},"end":{"line":454,"column":7}}]},"16":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":8},"end":{"line":495,"column":7}},{"start":{"line":495,"column":8},"end":{"line":495,"column":7}}]},"17":{"line":497,"type":"if","locations":[{"start":{"line":497,"column":15},"end":{"line":497,"column":14}},{"start":{"line":497,"column":15},"end":{"line":497,"column":14}}]},"18":{"line":548,"type":"if","locations":[{"start":{"line":548,"column":12},"end":{"line":548,"column":11}},{"start":{"line":548,"column":12},"end":{"line":548,"column":11}}]},"19":{"line":556,"type":"if","locations":[{"start":{"line":556,"column":19},"end":{"line":556,"column":18}},{"start":{"line":556,"column":19},"end":{"line":556,"column":18}}]},"20":{"line":605,"type":"if","locations":[{"start":{"line":605,"column":8},"end":{"line":605,"column":7}},{"start":{"line":605,"column":8},"end":{"line":605,"column":7}}]},"21":{"line":605,"type":"binary-expr","locations":[{"start":{"line":605,"column":12},"end":{"line":605,"column":41}},{"start":{"line":605,"column":45},"end":{"line":605,"column":73}}]},"22":{"line":642,"type":"if","locations":[{"start":{"line":642,"column":8},"end":{"line":642,"column":7}},{"start":{"line":642,"column":8},"end":{"line":642,"column":7}}]},"23":{"line":646,"type":"if","locations":[{"start":{"line":646,"column":15},"end":{"line":646,"column":14}},{"start":{"line":646,"column":15},"end":{"line":646,"column":14}}]},"24":{"line":671,"type":"if","locations":[{"start":{"line":671,"column":12},"end":{"line":671,"column":11}},{"start":{"line":671,"column":12},"end":{"line":671,"column":11}}]},"25":{"line":712,"type":"if","locations":[{"start":{"line":712,"column":8},"end":{"line":712,"column":7}},{"start":{"line":712,"column":8},"end":{"line":712,"column":7}}]},"26":{"line":758,"type":"if","locations":[{"start":{"line":758,"column":16},"end":{"line":758,"column":15}},{"start":{"line":758,"column":16},"end":{"line":758,"column":15}}]},"27":{"line":893,"type":"if","locations":[{"start":{"line":893,"column":20},"end":{"line":893,"column":19}},{"start":{"line":893,"column":20},"end":{"line":893,"column":19}}]},"28":{"line":895,"type":"if","locations":[{"start":{"line":895,"column":27},"end":{"line":895,"column":26}},{"start":{"line":895,"column":27},"end":{"line":895,"column":26}}]},"29":{"line":942,"type":"if","locations":[{"start":{"line":942,"column":8},"end":{"line":942,"column":7}},{"start":{"line":942,"column":8},"end":{"line":942,"column":7}}]},"30":{"line":942,"type":"binary-expr","locations":[{"start":{"line":942,"column":12},"end":{"line":942,"column":46}},{"start":{"line":942,"column":50},"end":{"line":942,"column":74}}]},"31":{"line":969,"type":"if","locations":[{"start":{"line":969,"column":12},"end":{"line":969,"column":11}},{"start":{"line":969,"column":12},"end":{"line":969,"column":11}}]},"32":{"line":973,"type":"if","locations":[{"start":{"line":973,"column":12},"end":{"line":973,"column":11}},{"start":{"line":973,"column":12},"end":{"line":973,"column":11}}]},"33":{"line":973,"type":"binary-expr","locations":[{"start":{"line":973,"column":16},"end":{"line":973,"column":40}},{"start":{"line":973,"column":44},"end":{"line":973,"column":66}}]},"34":{"line":983,"type":"if","locations":[{"start":{"line":983,"column":16},"end":{"line":983,"column":15}},{"start":{"line":983,"column":16},"end":{"line":983,"column":15}}]},"35":{"line":991,"type":"if","locations":[{"start":{"line":991,"column":16},"end":{"line":991,"column":15}},{"start":{"line":991,"column":16},"end":{"line":991,"column":15}}]},"36":{"line":999,"type":"if","locations":[{"start":{"line":999,"column":16},"end":{"line":999,"column":15}},{"start":{"line":999,"column":16},"end":{"line":999,"column":15}}]},"37":{"line":1049,"type":"if","locations":[{"start":{"line":1049,"column":8},"end":{"line":1049,"column":7}},{"start":{"line":1049,"column":8},"end":{"line":1049,"column":7}}]},"38":{"line":1054,"type":"if","locations":[{"start":{"line":1054,"column":8},"end":{"line":1054,"column":7}},{"start":{"line":1054,"column":8},"end":{"line":1054,"column":7}}]},"39":{"line":1059,"type":"if","locations":[{"start":{"line":1059,"column":8},"end":{"line":1059,"column":7}},{"start":{"line":1059,"column":8},"end":{"line":1059,"column":7}}]},"40":{"line":1064,"type":"if","locations":[{"start":{"line":1064,"column":8},"end":{"line":1064,"column":7}},{"start":{"line":1064,"column":8},"end":{"line":1064,"column":7}}]},"41":{"line":1094,"type":"if","locations":[{"start":{"line":1094,"column":12},"end":{"line":1094,"column":11}},{"start":{"line":1094,"column":12},"end":{"line":1094,"column":11}}]},"42":{"line":1098,"type":"if","locations":[{"start":{"line":1098,"column":19},"end":{"line":1098,"column":18}},{"start":{"line":1098,"column":19},"end":{"line":1098,"column":18}}]},"43":{"line":1100,"type":"if","locations":[{"start":{"line":1100,"column":16},"end":{"line":1100,"column":15}},{"start":{"line":1100,"column":16},"end":{"line":1100,"column":15}}]},"44":{"line":1100,"type":"binary-expr","locations":[{"start":{"line":1100,"column":20},"end":{"line":1100,"column":50}},{"start":{"line":1100,"column":54},"end":{"line":1100,"column":95}}]},"45":{"line":1103,"type":"if","locations":[{"start":{"line":1103,"column":16},"end":{"line":1103,"column":15}},{"start":{"line":1103,"column":16},"end":{"line":1103,"column":15}}]},"46":{"line":1103,"type":"binary-expr","locations":[{"start":{"line":1103,"column":20},"end":{"line":1103,"column":51}},{"start":{"line":1103,"column":55},"end":{"line":1103,"column":97}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":1,"115":0,"116":0,"117":0,"118":0,"119":0,"120":1,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":1,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":1,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":1,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":1,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":1,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":1,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":1,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":1,"281":0,"282":0,"283":1,"284":0,"285":0,"286":1,"287":0,"288":0,"289":1,"290":0,"291":0,"292":1,"293":0,"294":0,"295":1,"296":0,"297":0,"298":1,"299":0,"300":1,"301":1,"302":1},"b":{"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},"code":"\r\nimport {MetroChartData} from './metrochartdata';\r\nimport {MetroChartError} from './metrocharterror';\r\nimport {MetroLine} from './metroline';\r\nimport {Options} from './options';\r\nimport {Station} from './station';\r\n\r\n\r\nimport 'd3';\r\n\r\n/**\n * <p>\n * A MetroChart is a force-directed graph. Being a graph, it is made up of nodes\n * and links. The nodes represent stations (see interface {@link Station}) while\n * the links represent metrolines (see interface {@link MetroLine}).\n * </p>\n *\n * <p>\n * The data may include an attribute <code>time</code> on each node. The property\n * may be used to order nodes along the horizontal axis (by setting\n * <code>this.enableTimeAxis</code> to <code>true</code>). This is convenient\n * for visualizing certain types of data, such as narratives in stories or plays\n * (which character occurs together with which other characters in any given\n * scene, with nodes representing scenes and links representing characters).\n * </p>\n */\nexport class MetroChart {\r\n\n\n\n    /**\n     * The JSON data may include an optional <code>source</code> property (see\n     * interface {@link MetroChartData}). Property <code>this.datasource</code>\n     * stores the data source, or if the data source is omitted from the JSON,\n     * <code>this.datasource</code> is set to <code>'unknown'</code>.\n     */\n    public datasource: string;\n    /**\n     * Identifier of the DOM element such as <code>#metrochart</code>, in\n     * which to draw the MetroChart.\n     */\n    private elem: string;\n    /**\n     * The D3 selection representation of <code>this.elem</code>.\n     */\n    private elemSelection: d3.Selection<any>;\n    /**\n     * The height of the DOM element containing the MetroChart.\n     */\n    private h: number;\n    /**\n     * When the graph is visualized, station names can be displayed in a\n     * reserved area at the top of the visualization as well as at the bottom.\n     * This property sets the height of these reserved areas.\n     */\n    private labelSpaceVert: number;\n    /**\n     * Defines the rotation of the station labels.\n     */\n    private labelRotation: number;\n    /**\n     * The graph is padded to avoid having elements very close to the left-side\n     * and right-side edges of the visualization, or even falling off of it.\n     * This property defines how much padding there is (in pixels). Note that\n     * the bounding box takes into account the padding value.\n     */\n    private padding: {left:number, right:number};\n    /**\n     * When the data represents different entities than metrolines and stations\n     * this property may be used to define an alternative name to identify\n     * metrolines. Let's say your data represents the storyline of a comic book,\n     * then individual frames could be represented by a station, while the\n     * characters that occur in a frame could be represented by a line. In this\n     * case, <code>this.stationlabel</code> could be set to <code>'frame'</code>\n     * and <code>this.linelabel</code> could be set to <code>'character'</code>.\n     */\n    public linelabel: string;\n    /**\n     * The list of links/metrolines, pointing to the indices of two nodes/\n     * stations.\n     */\n    private links: MetroLine[];\n    /**\n     * The list of stations.\n     */\n    private nodes: Station[];\n    /**\n     * When the data represents different entities than metrolines and stations\n     * this property may be used to define an alternative name to identify\n     * stations. Let's say your data represents the storyline of a comic book,\n     * then individual frames could be represented by a station, while the\n     * characters that occur in a frame could be represented by a line. In this\n     * case, <code>this.stationlabel</code> could be set to <code>'frame'</code>\n     * and <code>this.linelabel</code> could be set to <code>'character'</code>.\n     */\n    public stationlabel: string;\n    /**\n     * Radius in pixels used in drawing the station symbols.\n     */\n    public stationShapeRadius: number;\n    /**\n     * The time value corresponding to the left-most pixel.\n     */\n    public timeValueLeft: number;\n    /**\n     * The time value corresponding to the right-most pixel.\n     */\n    public timeValueRight: number;\n    /**\n     * List of strings containing the unique metroline names.\n     */\n    private ulinks: string[];\n    /**\n     * The URL of where the data is located. Data should be compliant with the\n     * {@link MetroChartData} interface.\n     */\n    private _url: string;\n    /**\n     * The width of the DOM element containing the MetroChart.\n     */\n    private w: number;\n    /**\n     * See {@link Options.colors}.\n     */\n    private _colors: string[];\n    /**\n     * Defines the charge parameter of the force-directed graph.\n     */\n    private _charge: number;\n    /**\n     * See {@link Options.enableTimeAxis}.\n     */\n    private _enableTimeAxis: boolean;\n    /**\n     * Defines the gravity parameter of the force-directed graph.\n     */\n    private _gravity: number;\n    /**\n     * Defines the link distance parameter of the force-directed graph.\n     */\n    private _linkDistance: number;\n    /**\n     * Defines the link strength parameter of the force-directed graph.\n     */\n    private _linkStrength: number;\n    /**\n     * See {@link Options}.\n     */\n    private static defaultOptions: Options = {\n        /**\n         * See {@link Options.charge}.\n         */\n        charge: 0,\n        /**\n         * See {@link Options.colors}. Here are the default colors:\n         * <table>\n         *    <tr><td>1.</td><td bgcolor=\"#FF0000\"></td><td>red</td></tr>\n         *    <tr><td>2.</td><td bgcolor=\"#008000\"></td><td>olive</td></tr>\n         *    <tr><td>3.</td><td bgcolor=\"#0080FF\"></td><td>blue</td></tr>\n         *    <tr><td>4.</td><td bgcolor=\"#FF8000\"></td><td>orange</td></tr>\n         *    <tr><td>5.</td><td bgcolor=\"#FF0080\"></td><td>magenta</td></tr>\n         *    <tr><td>6.</td><td bgcolor=\"#FFee00\"></td><td>yellow</td></tr>\n         *    <tr><td>7.</td><td bgcolor=\"#80DD00\"></td><td>lime</td></tr>\n         *    <tr><td>8.</td><td bgcolor=\"#b200ff\"></td><td>purple</td></tr>\n         *    <tr><td>9.</td><td bgcolor=\"#00DD80\"></td><td>seagreen</td></tr>\n         *    <tr><td>10.</td><td bgcolor=\"#888888\"></td><td>dark gray</td></tr>\n         *    <tr><td>11.</td><td bgcolor=\"#000000\"></td><td>black</td></tr>\n         * </table>\n         */\n        colors: [\n            {name: 'red',       hexcode: '#FF0000'},\n            {name: 'olive',     hexcode: '#008000'},\n            {name: 'blue',      hexcode: '#0080FF'},\n            {name: 'orange',    hexcode: '#FF8000'},\n            {name: 'magenta',   hexcode: '#FF0080'},\n            {name: 'yellow',    hexcode: '#FFee00'},\n            {name: 'lime',      hexcode: '#80DD00'},\n            {name: 'purple',    hexcode: '#b200ff'},\n            {name: 'seagreen',  hexcode: '#00DD80'},\n            {name: 'dark gray', hexcode: '#888888'},\n            {name: 'black',     hexcode: '#000000'}\n        ],\n        /**\n         * See {@link Options.enableTimeAxis}.\n         */\n        enableTimeAxis: true,\n        /**\n         * See {@link Options.gravity}.\n         */\n        gravity: 0.0005,\n        /**\n         * See {@link Options.labelSpaceVert}.\n         */\n        labelSpaceVert: 130,\n        /**\n         * See {@link Options.labelRotation}.\n         */\n        labelRotation: -45,\n        /**\n         * See {@link Options.padding}.\n         */\n        padding: {left:50, right:50},\n        /**\n         * See {@link Options.linkDistance}.\n         */\n        linkDistance: 1,\n        /**\n         * See {@link Options.linkStrength}.\n         */\n        linkStrength: 0.0,\n        /**\n         * See {@link Options.stationShapeRadius}.\n         */\n        stationShapeRadius: 7.0\n    };\n\n    /**\n     * Create a new MetroChart instance.\n     * @param {string} elem The name of the DOM element in which you want to\n     * draw the MetroChart.\n     *\n     * @param {string} url The URL of the data file, which should be a JSON file\n     * formatted according to the <code>MetroChartData</code> interface.\n     *\n     * @param {Options} [options] Optional parameter containing the options.\n     *\n     */\n    constructor(elem: string, url:string, options?:Options) {\n\n        // store the string containing the DOM element ID\n        this.elem = elem;\n\n        // store the url to the data that was provided by the user\n        this._url = url;\n\n        // store the D3 selection of the element we want to draw in\n        this.elemSelection = d3.select(this.elem);\n\n        // store the width and height of the DOM element we want to draw in\n        // (somehow typescript gives an error about getBoundingClientRect() but\n        // it works in the browser (Google Chrome version 46.0.2490.71 (64-bit)))\n        let elemNoHash: string = elem.slice(1);\n        this.w = document.getElementById(elemNoHash).getBoundingClientRect().width;\n        this.h = document.getElementById(elemNoHash).getBoundingClientRect().height;\n\n        if (typeof options === 'undefined') {\n            this.applyDefaultOptions(MetroChart.defaultOptions);\n        } else {\n            this.applyDefaultOptions(options);\n        }\n\n        // load the data (internally defers to this.drawForceDirectedGraph() )\n        this.loaddata();\n\n    } // end method constructor()\n\n\n\n\n    /**\n     * @param {Options} options User supplied options that override the default\n     * options from {@link MetroChart.defaultOptions}.\n     *\n     */\n    public applyDefaultOptions(options?:Options): MetroChart {\n\n        // set the colors:\n        let colors: string[];\n        colors = [];\n        if (typeof options.colors === 'undefined') {\n            // use default colors\n            for (let color of MetroChart.defaultOptions.colors) {\n                colors.push(color.hexcode);\n            }\n        } else {\n            // use user-supplied colors\n            for (let color of options.colors) {\n                colors.push(color.hexcode);\n            }\n        }\n        this.colors = colors;\n\n\n        // set the force directed graph parameter 'charge'\n        if (typeof options.charge === 'undefined') {\n            // use default\n            this.charge = MetroChart.defaultOptions.charge;\n        } else {\n            // use user supplied value\n            this.charge = options.charge;\n        }\n\n\n        // set the force directed graph parameter 'gravity'\n        if (typeof options.gravity === 'undefined') {\n            // use default\n            this.gravity = MetroChart.defaultOptions.gravity;\n        } else {\n            // use user supplied value\n            this.gravity = options.gravity;\n        }\n\n\n        // set the force directed graph parameter 'linkDistance'\n        if (typeof options.linkDistance === 'undefined') {\n            // use default\n            this.linkDistance = MetroChart.defaultOptions.linkDistance;\n        } else {\n            // use user supplied value\n            this.linkDistance = options.linkDistance;\n        }\n\n\n        // set the force directed graph parameter 'linkStrength'\n        if (typeof options.linkStrength === 'undefined') {\n            // use default\n            this.linkStrength = MetroChart.defaultOptions.linkStrength;\n        } else {\n            // use user supplied value\n            this.linkStrength = options.linkStrength;\n        }\n\n\n        // define whether to enable the time axis\n        if (typeof options.enableTimeAxis === 'undefined') {\n            // use default\n            this.enableTimeAxis = MetroChart.defaultOptions.enableTimeAxis;\n        } else {\n            // use user supplied value\n            this.enableTimeAxis = options.enableTimeAxis;\n        }\n\n\n        // set the radius of the station symbols\n        if (typeof options.stationShapeRadius === 'undefined') {\n            // use default\n            this.stationShapeRadius = MetroChart.defaultOptions.stationShapeRadius;\n        } else {\n            // use user supplied value\n            this.stationShapeRadius = options.stationShapeRadius;\n        }\n\n        // set the vertical space reserved for plotting the station labels\n        if (typeof options.labelSpaceVert === 'undefined') {\n            // use default\n            this.labelSpaceVert = MetroChart.defaultOptions.labelSpaceVert;\n        } else {\n            // use user supplied value\n            this.labelSpaceVert = options.labelSpaceVert;\n        }\n\n        // set the station label rotation\n        if (typeof options.labelRotation === 'undefined') {\n            // use default\n            this.labelRotation = MetroChart.defaultOptions.labelRotation;\n        } else {\n            // use user supplied value\n            this.labelRotation = options.labelRotation;\n        }\n\n        // set the MetroChart's internal spacing (padding)\n        if (typeof options.padding === 'undefined') {\n            // use default\n            this.padding = MetroChart.defaultOptions.padding;\n        } else {\n            // use user supplied value\n            this.padding = options.padding;\n        }\n\n\n\n        return this;\n    } // end method applyDefaultOptions()\n\n\n\n\n    /**\n     * Method to calculate the position of the lines connecting the stations.\n     * The method takes into account how many lines there are at each station,\n     * so the vertical offset can be calculated by <code>this.calcStubOffset()</code>.\n     *\n     * @param {MetroLine} link The link between two Stations.\n     *\n     * @return {string} The SVG path string describing the position of the line.\n     *\n     */\n    private calcLinkShape(link: MetroLine): string {\n        // determine the coordinates of the given link\n\n        let str:string = '';\n\n        // draw straight lines between nodes\n\n        // The first time this method gets called, source and target are\n        // simply integer numbers, not objects with .x and .y properties.\n        // Therefore you need these two if-statements to make sure you don't\n        // generate any errors:\n        if (typeof link.source === 'object') {\n\n            // x-from\n            let xf: number = link.source.x;\n            // y-from\n            let yf: number = link.source.y + this.calcStubOffset(link, 'source');\n\n            str += 'M' + xf + ',' + yf + ' ';\n\n        } else {\n            // starting point of a temporary line (only displayed in the very first frame)\n            str += 'M0,0 ';\n        }\n        if (typeof(link.target) === 'object') {\n\n            // x-to\n            let xt: number = link.target.x;\n            // y-to\n            let yt: number = link.target.y + this.calcStubOffset(link, 'target');\n\n            str += 'L' + xt + ',' + yt;\n\n        } else {\n            // ending point of a temporary line (only displayed in the very first frame)\n            str += 'L10,10';\n        }\n\n        return str;\n\n    } // end method calcLinkShape()\n\n\n\n    /**\n     * When drawing the vertical line from station to label, you need to know\n     * whether to draw to the bottom reserved area or the top reserved area.\n     * This method determines whether the bottom reserved area or the top\n     * reserved area is closest to the position of the station. This is then\n     * used in drawing the station-to-label vertical line, as well as in\n     * calculating the position of the station labels.\n     *\n     * @param  {Station} station The station for which we want to determine\n     * which is closer --the top reserved area or the bottom one.\n     *\n     * @return {string} Either <code>'top'</code> or <code>'bottom'</code>.\n     *\n     */\n    calcLabelTopOrBottom(station: Station):string {\n\n        let yTop:number = 0 + this.labelSpaceVert;\n        let yBottom:number = this.h - this.labelSpaceVert;\n\n        let distToTop:number = station.y - yTop;\n        let distToBottom:number = yBottom - station.y;\n\n        if (distToTop < distToBottom) {\n            return 'top';\n        } else {\n            return 'bottom';\n        }\n    }\n\n\n\n    /**\n     * The stations are labeled with their names. These labels are drawn in\n     * one of two reserved plotting areas, one near the bottom of the graph and\n     * one near the top. This method determines which is closer, and the returns\n     * the translation needed for the label to be correctly placed, i.e.\n     * horizontally aligned with the position of the station, and vertically\n     * aligned so it falls in either the bottom or the top reserved area. The\n     * translation also includes a rotation, which can be set through\n     * MetroChart's options (see {@link Options.labelRotation}).\n     *\n     * @param  {Station} station The station for which you want to draw a\n     * label.\n     *\n     * @return {[type]} The translation that must be applied to position the\n     * label such that it is horizontally aligned with the position of the\n     * station proper, and vertically aligned with the bottom or top reserved\n     * area. The translation also includes a rotation, which can be set through\n     * MetroChart's options (see {@link Options.labelRotation}).\n     *\n     */\n    calcLabelTranslate(station: Station) {\n\n        let yTop:number = 0 + this.labelSpaceVert;\n        let yBottom:number = this.h - this.labelSpaceVert;\n\n\n        // apply the bounding box\n        station = this.observeBoundingBox(station);\n\n        let topOrBottom:string = this.calcLabelTopOrBottom(station);\n\n\n        if (topOrBottom === 'top') {\n            return 'translate(' + station.x + ',' + (yTop - 10 - 15) + ') rotate(' + this.labelRotation + ')';\n        } else if (topOrBottom === 'bottom') {\n            return 'translate(' + station.x + ',' + (yBottom + 10 + 15) + ') rotate(' + this.labelRotation + ')';\n        } else {\n            throw new MetroChartError('This should not happen.');\n        }\n    }\n\n\n\n\n\n    /**\n     * Method that calculates the shape of the station symbol.\n     *\n     * @param {Station} node The station for which to draw a symbol.\n     *\n     * @return {string} String containing the SVG path 'd' data for the\n     * station symbol.\n     */\n    private calcStationShape(node: Station): string {\n\n\n\n\n        /**\n         * Local function that calculates the shape of the station symbol's top\n         * or bottom part.\n         *\n         * @param {number} fromy The y-value of where the arc should start.\n         *\n         * @param {number} r The radius of the arc.\n         *\n         * @param {string} topOrBottomString Whether the method is used to draw\n         * the top part or the bottom part.\n         *\n         * @return {string} String containing the SVG path 'd' data (for the\n         * part that describes the top or bottom arc).\n         *\n         */\n        let calcStationShapeArc = function(fromy:number, r:number, topOrBottomStr:string): string {\n\n            let iSection: number;\n            let nSections: number;\n            let outputStr:string;\r\n            let angle: number;\n            let dx: number;\n            let dy: number;\n\n            nSections = 8;\n            outputStr = '';\n\n            if (topOrBottomStr === 'top') {\n                for (iSection = 0; iSection <= nSections; iSection += 1) {\n                    angle = (nSections - iSection) / nSections * Math.PI;\n                    dx = Math.cos(angle) * r;\n                    dy = Math.sin(angle) * -r;\n                    outputStr += 'L ' + (dx) + ' ' + (fromy + dy) + ' ';\n                }\n                return outputStr;\n            } else if (topOrBottomStr === 'bottom') {\n                for (iSection = 0; iSection < nSections; iSection += 1) {\n                    angle = (iSection) / nSections * Math.PI;\n                    dx = Math.cos(angle) * r;\n                    dy = Math.sin(angle) * r;\n                    outputStr += 'L ' + (dx) + ' ' + (fromy + dy) + ' ';\n                    }\n                return outputStr;\n            } else {\n                throw new MetroChartError(' in .calcStationShapeArc(): \\'Fourth argument should be either \\'top\\' or \\'bottom\\'.\\'');\n            }\n        }; // end local method calcStationShapeArc\n\n\n\n\n\n        // half the width of the entire station symbol\n        let hw: number = this.stationShapeRadius;\n        // half the height of the entire station symbol\n        let hh: number = node.nLines * this.stationShapeRadius;\n\n        let str: string = 'M ' + (-hw) + ' 0 ' +\n                          'L ' + (-hw) + ' ' + ((node.nLines - 1) * -this.stationShapeRadius) + ' ' +\n                          calcStationShapeArc((node.nLines - 1) * -this.stationShapeRadius, this.stationShapeRadius, 'top') +\n                          'L ' + (+hw) + ' ' + ((node.nLines - 1) * this.stationShapeRadius) + ' ' +\n                          calcStationShapeArc((node.nLines - 1) * this.stationShapeRadius, this.stationShapeRadius, 'bottom') +\n                          'L ' + (-hw) + ' ' + ((node.nLines - 1) * this.stationShapeRadius) + ' ' +\n                          'Z';\n         return str;\n    } // end method calcStationShape()\n\n\n\n\n    /**\n     * Method that calculates the translation of the station symbol, while\n     * observing the bounding box set by the dimensions of the SVG area and the\n     * dimension of the station symbols.\n     *\n     * @param {Station} node The station that needs to be translated.\n     *\n     * @return {string} String containing the translate offsets.\n     *\n     */\n    private calcStationTranslate(node:Station): string {\n\n\n        // if nodes have time labels and time axis is enabled, set x-position\n        if (typeof node.time === 'number' && this.enableTimeAxis === true) {\n            // calculate the fraction\n            let f: number = (node.time - this.timeValueLeft) / (this.timeValueRight - this.timeValueLeft);\n\n            node.x = this.padding.left + f * (this.w - this.padding.right - this.padding.left);\n        }\n\n        // apply the bounding box\n        node = this.observeBoundingBox(node);\n\n        return 'translate(' + node.x + ',' + node.y + ')';\n\n    }\n\n\n\n\n    /**\n     * Method to calculate the vertical offset that indicates that there is more\n     * than one line at a station.\n     *\n     * @param {MetroLine} link The link object connecting two stations.\n     *\n     * @param {string} sourceOrTargetString The stub's offset can be different\n     * at the source than at the target nodes, this parameter indicates which we\n     * are currently calculating.\n     *\n     * @return {number} The vertical offset in pixels.\n     *\n     */\n    private calcStubOffset(link: MetroLine, sourceOrTargetStr:string): number {\n        // a node can have multiple lines coming from it. The order is\n        // determined by the current method\n        let stubIndex: number;\n        let stubOffset: number;\n        let nLines: number;\n\n        if (sourceOrTargetStr === 'source') {\n            let linesAtSource = this.nodes[link.source.index].lines;\n            nLines = linesAtSource.length;\n            stubIndex = linesAtSource.indexOf(link.line);\n        } else if (sourceOrTargetStr === 'target') {\n            let linesAtTarget = this.nodes[link.target.index].lines;\n            nLines = linesAtTarget.length;\n            stubIndex = linesAtTarget.indexOf(link.line);\n        } else {\n            throw new MetroChartError(' in .calcStubOffset(): \\'Input argument sh' +\n                                      'ould be \\'source\\' or \\'target\\' .\\'');\n        }\n        stubOffset = -1 * (nLines * this.stationShapeRadius - this.stationShapeRadius) + (stubIndex * 2 * this.stationShapeRadius);\n        return stubOffset;\n\n    }\n\n\n\n\n    /**\n     * Method to calculate the set of unique line names, <code>this.ulinks</code>.\n     */\n    private calcUniqueLines(): void {\n        // initialize the array that is going to hold the unique names of lines\n        this.ulinks = [];\n        // iterate over the links, whenever you see a previously unseen line name,\n        // add it to the list of strings in this.ulinks\n        for (let link of this.links) {\n            if (this.ulinks.indexOf(link.line) === -1 ) {\n                this.ulinks.push(link.line);\n            }\n        }\n        // sort the list of unique line names\n        this.ulinks.sort();\n        // assign the index of each link's line name to property .uindex\n        for (let link of this.links) {\n            link.uindex = this.ulinks.indexOf(link.line);\n        }\n    }\n\n\n    /**\n     * The svg drawing area has two reserved areas, one at the top and one at\n     * the bottom. These area are reserved for labels containing the station\n     * names. This method draws a line between the a node of the graph and the\n     * station label proper.\n     *\n     * @param  {Station} station The node for which line must be drawn to its\n     * label.\n     *\n     * @return {string} The SVG path \"d\" string data.\n     *\n     */\n    calcVerticalLine(station: Station): string {\n\n        let h:number = this.labelSpaceVert;\n        let yTop:number = 0 + h;\n        let yBottom:number = this.h - h;\n\n        let distToTop:number = station.y - yTop;\n        let distToBottom:number = yBottom - station.y;\n\n        // apply the bounding box\n        station = this.observeBoundingBox(station);\n\n        let halfStationHeight: number = station.nLines * this.stationShapeRadius;\n\n        let buffer: number = 30;\n\n        if (distToTop < distToBottom) {\n            return 'M ' + station.x + ' ' + (station.y - halfStationHeight - 5) + ' ' +\n                   'L ' + station.x + ',' + (yTop - buffer + 15);\n        } else {\n            return 'M ' + station.x + ' ' + (station.y + halfStationHeight + 5) + ' ' +\n                   'L ' + station.x + ',' + (yBottom + buffer - 15);\n        }\n    }\n\n\n\n\n\n    /**\n     * Draw/update force-directed metrochart graph using the current settings.\n     */\n    public drawForceDirectedGraph(): MetroChart {\n\n        // define onMouseOutNodeGroup as a local function to the drawForceDirectedGraph() method\n        let onMouseOutNodeGroup = function(eventsource:any) {\r\n            //  Note the d3 selector magic that is applied here. I get the\n            //  source of the event, which is an svg group, and on that\n            //  selection I subselect everything of class 'nodegroup-child' (which\n            //  I set myself when I created the child objects). On that\n            //  selection, I remove the class 'highlight' which was set by\n            //  onMouseOver() using d3's classed method:\n            let children = d3.select(eventsource).selectAll('.nodegroup-child');\n            // remove class 'highlight' from all children:\n            children.classed('highlight', false);\n        };\n\n        // define onMouseOverNodeGroup as a local function to the drawForceDirectedGraph() method\n        let onMouseOverNodeGroup = function(eventsource:any) {\r\n            //  Note the d3 selector magic that is applied here. I get the\n            //  source of the event, which is an svg group, and on that\n            //  selection I subselect everything of class 'nodegroup-child' (which\n            //  I set myself when I created the child objects). On that\n            //  selection, I add a class using d3's classed method:\n            let children = d3.select(eventsource).selectAll('.nodegroup-child');\n            // add the class 'highlight' to all children, so that the element\n            // can be styled using CSS\n            children.classed('highlight', true);\n\n            // bring the svg group that generated the event to the foreground by\n            // re-ordering the '.nodegroup-parent' svg groups\n            d3.selectAll('.nodegroup-parent').each(function(){\n                if (this === eventsource) {\n                    this.parentNode.appendChild(this);\n                };\n            });\n\n        };\n\n        // define onMouseOutMetroLine as a local function to the drawForceDirectedGraph() method\n        let onMouseOutMetroLine = function(eventsource:any) {\r\n            // Here, 'eventsource' refers to the line segment (path)\n            // that generated the event, not the instance of MetroChart!\n            let uindex: number = d3.select(eventsource).datum().uindex;\n            let classname = '.link.line' + uindex;\n            d3.selectAll(classname).classed('highlight', false);\n        };\n\n        // define onMouseOverMetroLine as a local function to the drawForceDirectedGraph() method\n        let onMouseOverMetroLine = function(eventsource:any) {\r\n            // Here, 'eventsource' refers to the line segment (path)\n            // that generated the event, not the instance of MetroChart!\n            let uindex: number = d3.select(eventsource).datum().uindex;\n            let classname = '.link.line' + uindex;\n            d3.selectAll(classname).classed('highlight', true);\n        };\n\n\n\n\n\n        // capture the 'this' object:\n        let that = this;\n\n        // if an metrochart-svg element exists, clear its contents:\n        d3.select('#metrochart-svg').remove();\n\n        // select the DOM element to draw in, and set its identifier, as well\n        // as its width and height\n        let vis = this.elemSelection.append('svg')\n            .attr('id', 'metrochart-svg')\n            .attr('width', this.w)\n            .attr('height', this.h);\n\n        // initialize the force layout, set its width and height, then update it with\n        // the nodes and links arrays (which initially are empty),\n        let force = d3.layout.force()\n            .size([this.w, this.h])\n            .nodes(this.nodes)\n            .links(this.links);\n\n        // set the directed-graph force parameters:\n        force.charge(this.charge);\n        force.gravity(this.gravity);\n        force.linkDistance(this.linkDistance);\n        force.linkStrength(this.linkStrength);\n\n        // In this next part, the order in which link, vline, node etc are\n        // initialized is significant for which object is drawn on top of which\n        // object\n\n        // initialize the links between stations\n        let link = vis.selectAll('.link')\n            .data(this.links)\n            .enter().append('path')\n                .attr('class', function(d:MetroLine) {return 'link' + ' ' + 'line' + d.uindex; } )\n                .attr('d', function(d:MetroLine) {return that.calcLinkShape(d); })\n                .style('stroke', function(d:MetroLine) {return that.getColor(d.uindex); })\n                .on('click', function(d:MetroLine) {console.log(that.linelabel + ' ' + d.line); })\n                .on('mouseover', function() {\n                    // somehow the 'this' object does not refer to the instance\n                    // of MetroChart here, but to the event that generated the\n                    // mouseover event, in this case the line segment.\n                    let eventsource = this;\n                    onMouseOverMetroLine(eventsource); } )\n                .on('mouseout', function() {\n                    // somehow the 'this' object does not refer to the instance\n                    // of MetroChart here, but to the event that generated the\n                    // mouseout event, in this case the line segment.\n                    let eventsource = this;\n                    onMouseOutMetroLine(eventsource);\n                });\n\n\n        // make a group of class nodegroup that will contain the station symbol,\n        // the vertical line, and the station label:\n        let nodeGroup = vis.selectAll('.node')\n            .data(this.nodes)\n            .enter().append('g')\n            .attr('class', 'nodegroup-parent')\n            .on('mouseover', function() {\n                // somehow the 'this' object does not refer to the instance\n                // of MetroChart here, but to the event that generated the\n                // mouseover event, in this case the svg group element.\n                let eventsource = this;\n                onMouseOverNodeGroup(eventsource); } )\n            .on('mouseout', function() {\n                // somehow the 'this' object does not refer to the instance\n                // of MetroChart here, but to the event that generated the\n                // mouseout event, in this case the svg group element.\n                let eventsource = this;\n                onMouseOutNodeGroup(eventsource);\n            });\n\n        // label the nodes by adding their name as text\n        let label = nodeGroup.append('text')\n            .attr('class', 'label nodegroup-child')\n            .attr('transform', 'translate(0,0) rotate(45)')\n            .text(function(d:Station) {return d.name; });\n\n        // draw a vertical line from each node to its corresponding label:\n        let vline = nodeGroup.append('path')\n            .attr('class', 'vline nodegroup-child')\n            .attr('d', function(d:Station) {return that.calcVerticalLine(d); });\n\n        // draw the station symbol:\n        let node = nodeGroup.append('path')\n                .attr('class', 'node nodegroup-child')\n                .attr('d', function(d:Station) {return that.calcStationShape(d); })\n                .on('click', function(d:Station) {console.log(that.stationlabel + ' ' + d.index + ': ' + d.name); })\n                .call(force.drag);\n\n\n        force.on('tick', function(e) {\n\n            // This is actually a loop in which the force-directing algorithm\n            // adjusts the values of node.x and node.y for all node of\n            // this.nodes. Since you want to have a consistent visualization,\n            // you need to make sure that the other components (i.e. the\n            // metrolines, the station-to-label lines, and the labels) move with\n            // the moving nodes.\n            node.attr('transform', function(d:Station) {return that.calcStationTranslate(d); });\n\n            // update the position of the station labels\n            label.attr('transform', function(d:Station) {return that.calcLabelTranslate(d); })\n                .style('text-anchor', function(d:Station) {\n                    let topOrBottom:string = that.calcLabelTopOrBottom(d);\n                    if (topOrBottom === 'top') {\n                        return 'start';\n                    } else if (topOrBottom === 'bottom') {\n                        return 'end';\n                    } else {\n                        throw new MetroChartError('This should not happen.');\n                    }\n                });\n\n\n            // update the position of the station-to-label vertical lines\n            vline.attr('d', function(d:Station) {return that.calcVerticalLine(d); });\n\n            // for each link of this.links, recalculate the path connecting the stations (since\n            // these were just changed)\n            link.attr('d', function(d:MetroLine) {return that.calcLinkShape(d); });\n\n\n        });\n\n\n        // Restart the layout.\n        force.start();\n\n        return this;\n\n\n    } // end method drawForceDirectedGraph()\n\n\n\n    /**\n     * Get the color of a line from <code>this.colors</code>, given its index\n     * <code>uindex</code> into <code>this.ulinks</code>. If\n     * <code>this.colors</code> is <code>undefined</code> or zero-length, return\n     * a color string representing 50% gray. If there are not enough colors in\n     * <code>this.colors</code>, use modulo math to determine the appropriate\n     * index into the color table.\n     *\n     * @param {number} uindex Index into <code>this.ulinks</code>\n     *\n     * @return {string} The hexadecimal color string used for drawing\n     * <code>this.ulinks[uindex]</code>.\n     *\n     */\n    public getColor(uindex:number): string {\n\n        let str:string;\n\n        if (typeof this.colors === 'undefined' || this.colors.length === 0) {\n            // in case there are no predefined colors, set all colors to 50% gray\n            str = '#808080';\n        } else {\n            let nColors:number = this.colors.length;\n            // use the modulo-nColors of the uindex value as index into the color table\n            str = this.colors[uindex % nColors];\n        }\n        return str;\n    }\n\n\n\n\n    /**\n     * Method to load the data from <code>this._url</code> using an <code>XMLHttpRequest</code>.\n     */\n    private loaddata() {\n        // load data from local file\n\n        // capture the 'this' object from the current context\n        let that = this;\n\n        let xmlHttp = new XMLHttpRequest();\n\n        // define what to do after the data has been downloaded successfully\n        xmlHttp.onreadystatechange = function() {\n            if (xmlHttp.status === 429) {\n                console.log('Throttle limit exceeded. See \"https://dev.socrata.com/docs/' +\n                            'app-tokens.html#throttling-limits\" for more information.');\n            }\n            if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {\n\n                let data: any = JSON.parse(xmlHttp.responseText);\n\n                // get the nodes and links from the parsed data\n                that.nodes = data.nodes;\n                that.links = data.links;\n\n                // if the data includes an alternative descriptive name for\n                // line, use it, otherwise use 'line'\n                if (typeof data.linelabel === 'undefined') {\n                    that.linelabel = 'line';\n                } else {\n                    that.linelabel = data.linelabel;\n                }\n\n                // if the data includes an alternative descriptive name for\n                // station, use it, otherwise use 'station'\n                if (typeof data.stationlabel === 'undefined') {\n                    that.stationlabel = 'station';\n                } else {\n                    that.stationlabel = data.stationlabel;\n                }\n\n                // if the data includes a data source, use it, otherwise use\n                // 'unknown'\n                if (typeof data.source === 'undefined') {\n                    that.datasource = 'unknown';\n                } else {\n                    that.datasource = data.source;\n                }\n\n                console.log('MetroChart: \\'Done loading data from \"' + that._url + '\"\\'');\n\n                // determine the list of unique line names:\n                that.calcUniqueLines();\n                // verify the data and add some properties:\n                that.verifyData();\n\n                // draw the force directed graph:\n                that.drawForceDirectedGraph();\n            }\n        };\n\n        // make the actual request\n        xmlHttp.open('GET', this._url, true); // true for asynchronous\n\n        // not sure what this is...end the connection?\n        xmlHttp.send(null);\n\n\n    } // end method loaddata()\n\n\n    /**\n     * The graph has nodes of different sizes, depending on how many\n     * metrolines stop at that station. However, you still want the entire\n     * station symbol to remain inside the box defined by the svg drawing area.\n     * This function makes sure that each station remains inside that bounding\n     * box.\n     *\n     * @param {Station} node The station for which the bounding box must be\n     * observed.\n     *\n     * @return {Station} The station with updated .x and .y properties such\n     * that the entire station symbol falls within the bounding box.\n     *\n     */\n    private observeBoundingBox(node:Station):Station {\n\n        // half the width of the entire station symbol\n        let hw: number = this.stationShapeRadius;\n        // half the height of the entire station symbol\n        let hh: number = node.nLines * this.stationShapeRadius;\n\n        // observe the bounding box edge on the right\n        if (node.x > this.w - hw - this.padding.right) {\n            node.x = this.w - hw - this.padding.right;\n        }\n\n        // observe the bounding box edge on the left\n        if (node.x < 0 + hw + this.padding.left) {\n            node.x = 0 + hw + this.padding.left;\n        }\n\n        // observe the bounding box edge on the top\n        if (node.y > this.h - hh - this.labelSpaceVert) {\n            node.y = this.h - hh - this.labelSpaceVert;\n        }\n\n        // observe the bounding box edge on the bottom\n        if (node.y < 0 + hh + this.labelSpaceVert) {\n            node.y = 0 + hh + this.labelSpaceVert;\n        }\n\n        return node;\n\n    }\n\n\n\n\n    /**\n     * Updates the data on the MetroChart object:\n     * <ul>\n     * <li>adds <code>this.nodes.x</code>, <code>this.nodes.y</code>,\n     * <code>this.nodes.nLines</code> for all nodes</li>\n     * <li>calculates minimum time value (<code>this.timeValueLeft</code>) and\n     * maximum time value (<code>this.timeValueRight</code>) if applicable</li>\n     * </ul>\n     *\n     * @return {MetroChart} Returns the MetroChart object with updated data\n     */\n    private verifyData(): MetroChart {\n\n\n        // set the initial position on all nodes:\n        for (let node of this.nodes) {\n            node.x = this.w / 2;\n            node.y = this.h / 2;\n            node.nLines = node.lines.length;\n            if (typeof node.time === 'undefined') {\n                // this node has no associated information that can be used\n                // to position it on a time axis\n                console.log('MetroChart: \\'No time information.\\'');\n            } else if (typeof node.time === 'number') {\n\n                if (node.time < this.timeValueLeft || typeof this.timeValueLeft === 'undefined') {\n                    this.timeValueLeft = node.time;\n                }\n                if (node.time > this.timeValueRight || typeof this.timeValueRight === 'undefined') {\n                    this.timeValueRight = node.time;\n                }\n            } else {\n                throw new MetroChartError(' in .verifyData(): \\'node.time\\'s type should be \\'number\\'.');\n            }\n        }\n        return this;\n    }\n\n    // getters and setters from here\n\n    /**\n    * Sets the list of colors to be used for visualizing the lines.\n    */\n    public set colors(colors: string[]) {\n        this._colors = colors;\n    }\n    public get colors():string[] {\n        return this._colors;\n    }\n\n    /**\n    * Defines whether or not to apply the time axis constraint in positioning\n    * the stations horizontally.\n    */\n    public set enableTimeAxis(enableTimeAxis: boolean) {\n        this._enableTimeAxis = enableTimeAxis;\n    }\n    public get enableTimeAxis():boolean {\n        return this._enableTimeAxis;\n    }\n\n    /**\n    * Sets the force-directed graph's charge parameter.\n    */\n    public set charge(charge: number) {\n        this._charge = charge;\n    }\n    public get charge():number {\n        return this._charge;\n    }\n\n\n    /**\n    * Sets the force-directed graph's link distance parameter.\n    */\n    public set linkDistance(linkDistance: number) {\n        this._linkDistance = linkDistance;\n    }\n    public get linkDistance():number {\n        return this._linkDistance;\n    }\n\n\n    /**\n    * Sets the force-directed graph's gravity parameter.\n    */\n    public set gravity(gravity: number) {\n        this._gravity = gravity;\n    }\n    public get gravity():number {\n        return this._gravity;\n    }\n\n    /**\n    * Sets the force-directed graph's link strength parameter.\n    */\n    public set linkStrength(linkStrength: number) {\n        this._linkStrength = linkStrength;\n    }\n    public get linkStrength():number {\n        return this._linkStrength;\n    }\n\n\n    /**\n    * Gets the url of where the data was loaded from.\n    */\n    public get url(): string {\n        return this._url;\n    }\n\n\n}\n","l":{"3":1,"9":1,"27":1,"149":1,"228":1,"231":0,"234":0,"237":0,"242":0,"243":0,"244":0,"246":0,"247":0,"249":0,"253":0,"265":1,"268":0,"269":0,"270":0,"272":0,"273":0,"277":0,"278":0,"281":0,"285":0,"287":0,"290":0,"295":0,"297":0,"300":0,"305":0,"307":0,"310":0,"315":0,"317":0,"320":0,"325":0,"327":0,"330":0,"335":0,"337":0,"340":0,"344":0,"346":0,"349":0,"353":0,"355":0,"358":0,"362":0,"364":0,"367":0,"372":0,"388":1,"391":0,"399":0,"402":0,"404":0,"406":0,"410":0,"412":0,"415":0,"417":0,"419":0,"423":0,"426":0,"446":1,"448":0,"449":0,"451":0,"452":0,"454":0,"455":0,"457":0,"483":1,"485":0,"486":0,"490":0,"492":0,"495":0,"496":0,"497":0,"498":0,"500":0,"516":1,"536":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"545":0,"546":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"563":0,"565":0,"574":0,"576":0,"578":0,"585":0,"601":1,"605":0,"607":0,"609":0,"613":0,"615":0,"635":1,"638":0,"639":0,"640":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"651":0,"654":0,"655":0,"665":1,"667":0,"670":0,"671":0,"672":0,"676":0,"678":0,"679":0,"696":1,"698":0,"699":0,"700":0,"702":0,"703":0,"706":0,"708":0,"710":0,"712":0,"713":0,"716":0,"728":1,"731":0,"738":0,"740":0,"744":0,"750":0,"753":0,"757":0,"758":0,"759":0,"766":0,"769":0,"770":0,"771":0,"775":0,"778":0,"779":0,"780":0,"788":0,"791":0,"795":0,"802":0,"808":0,"809":0,"810":0,"811":0,"818":0,"821":0,"822":0,"823":0,"824":0,"829":0,"830":0,"835":0,"836":0,"842":0,"850":0,"851":0,"856":0,"857":0,"861":0,"864":0,"867":0,"869":0,"872":0,"874":0,"875":0,"879":0,"887":0,"890":0,"892":0,"893":0,"894":0,"895":0,"896":0,"898":0,"904":0,"908":0,"915":0,"917":0,"938":1,"940":0,"942":0,"944":0,"946":0,"948":0,"950":0,"959":1,"963":0,"965":0,"968":0,"969":0,"970":0,"973":0,"975":0,"978":0,"979":0,"983":0,"984":0,"986":0,"991":0,"992":0,"994":0,"999":0,"1000":0,"1002":0,"1005":0,"1008":0,"1010":0,"1013":0,"1018":0,"1021":0,"1041":1,"1044":0,"1046":0,"1049":0,"1050":0,"1054":0,"1055":0,"1059":0,"1060":0,"1064":0,"1065":0,"1068":0,"1086":1,"1090":0,"1091":0,"1092":0,"1093":0,"1094":0,"1097":0,"1098":0,"1100":0,"1101":0,"1103":0,"1104":0,"1107":0,"1110":0,"1118":1,"1119":0,"1122":0,"1129":1,"1130":0,"1133":0,"1139":1,"1140":0,"1143":0,"1150":1,"1151":0,"1154":0,"1161":1,"1162":0,"1165":0,"1171":1,"1172":0,"1175":0,"1182":1,"1183":0,"1187":1}},
"src/metrocharterror.ts":{"path":"src/metrocharterror.ts","statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":17,"column":1}},"2":{"start":{"line":4,"column":37},"end":{"line":4,"column":42}},"3":{"start":{"line":9,"column":4},"end":{"line":16,"column":5}},"4":{"start":{"line":12,"column":8},"end":{"line":12,"column":23}},"5":{"start":{"line":14,"column":8},"end":{"line":14,"column":38}},"6":{"start":{"line":15,"column":8},"end":{"line":15,"column":31}},"7":{"start":{"line":17,"column":0},"end":{"line":17,"column":1}},"8":{"start":{"line":4,"column":13},"end":{"line":17,"column":1}}},"fnMap":{"1":{"name":"(anonymous_66)","line":4,"loc":{"start":{"line":4,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"MetroChartError","line":9,"loc":{"start":{"line":9,"column":4},"end":{"line":9,"column":31}}}},"branchMap":{},"s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":1},"b":{},"f":{"1":1,"2":0},"code":"/*\n * Not sure why the {@link MetroChartError} class works like it does\n */\nexport class MetroChartError extends Error {\r\n\n    public message : string;\n    public name    : string;\n\n    constructor(message: string) {\n\n        // call the super class (Error)'s constructor:\n        super(message);\n\n        this.name = 'MetroChartError';\n        this.message = message;\n    }\n}\n","l":{"4":1,"9":1,"12":0,"14":0,"15":0,"17":1}}}
