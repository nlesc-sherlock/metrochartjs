{
"node_modules/browserify/node_modules/browser-pack/_prelude.js":{"path":"node_modules/browserify/node_modules/browser-pack/_prelude.js","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}}},"branchMap":{"1":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}]}},"s":{"1":37},"b":{"1":[10,7]},"f":{"1":12},"code":"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","l":{"1":37}},
"src/main.ts":{"path":"src/main.ts","statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":40}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":50}}},"fnMap":{},"branchMap":{},"s":{"1":1,"2":1,"3":1,"4":1},"b":{},"f":{},"code":"/**\r\n * MetroChart module\r\n */\r\n\r\n\r\nexport {MetroChart} from './metrochart';\r\nexport {MetroChartData} from './metrochartdata';\r\nexport {MetroChartError} from './metrocharterror';\r\nexport {MetroLine} from './metroline';\r\nexport {Options} from './options';\r\nexport {Station} from './station';\r\n\r\n","l":{"6":1,"8":1}},
"src/metrochart.ts":{"path":"src/metrochart.ts","statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":12}},"3":{"start":{"line":27,"column":0},"end":{"line":1220,"column":1}},"4":{"start":{"line":228,"column":4},"end":{"line":258,"column":5}},"5":{"start":{"line":231,"column":8},"end":{"line":231,"column":25}},"6":{"start":{"line":234,"column":8},"end":{"line":234,"column":24}},"7":{"start":{"line":237,"column":8},"end":{"line":237,"column":57}},"8":{"start":{"line":240,"column":8},"end":{"line":240,"column":33}},"9":{"start":{"line":242,"column":8},"end":{"line":246,"column":9}},"10":{"start":{"line":243,"column":12},"end":{"line":243,"column":64}},"11":{"start":{"line":245,"column":12},"end":{"line":245,"column":46}},"12":{"start":{"line":249,"column":8},"end":{"line":249,"column":24}},"13":{"start":{"line":252,"column":8},"end":{"line":252,"column":35}},"14":{"start":{"line":253,"column":8},"end":{"line":255,"column":11}},"15":{"start":{"line":254,"column":12},"end":{"line":254,"column":28}},"16":{"start":{"line":262,"column":11},"end":{"line":273,"column":5}},"17":{"start":{"line":265,"column":8},"end":{"line":265,"column":33}},"18":{"start":{"line":267,"column":8},"end":{"line":267,"column":31}},"19":{"start":{"line":269,"column":8},"end":{"line":269,"column":26}},"20":{"start":{"line":271,"column":8},"end":{"line":271,"column":38}},"21":{"start":{"line":282,"column":11},"end":{"line":390,"column":5}},"22":{"start":{"line":285,"column":8},"end":{"line":285,"column":29}},"23":{"start":{"line":286,"column":8},"end":{"line":286,"column":20}},"24":{"start":{"line":287,"column":8},"end":{"line":297,"column":9}},"25":{"start":{"line":289,"column":12},"end":{"line":291,"column":13}},"26":{"start":{"line":289,"column":17},"end":{"line":289,"column":26}},"27":{"start":{"line":290,"column":16},"end":{"line":290,"column":43}},"28":{"start":{"line":294,"column":12},"end":{"line":296,"column":13}},"29":{"start":{"line":294,"column":17},"end":{"line":294,"column":26}},"30":{"start":{"line":295,"column":16},"end":{"line":295,"column":43}},"31":{"start":{"line":298,"column":8},"end":{"line":298,"column":29}},"32":{"start":{"line":302,"column":8},"end":{"line":308,"column":9}},"33":{"start":{"line":304,"column":12},"end":{"line":304,"column":59}},"34":{"start":{"line":307,"column":12},"end":{"line":307,"column":41}},"35":{"start":{"line":312,"column":8},"end":{"line":318,"column":9}},"36":{"start":{"line":314,"column":12},"end":{"line":314,"column":61}},"37":{"start":{"line":317,"column":12},"end":{"line":317,"column":43}},"38":{"start":{"line":322,"column":8},"end":{"line":328,"column":9}},"39":{"start":{"line":324,"column":12},"end":{"line":324,"column":71}},"40":{"start":{"line":327,"column":12},"end":{"line":327,"column":53}},"41":{"start":{"line":332,"column":8},"end":{"line":338,"column":9}},"42":{"start":{"line":334,"column":12},"end":{"line":334,"column":71}},"43":{"start":{"line":337,"column":12},"end":{"line":337,"column":53}},"44":{"start":{"line":342,"column":8},"end":{"line":348,"column":9}},"45":{"start":{"line":344,"column":12},"end":{"line":344,"column":75}},"46":{"start":{"line":347,"column":12},"end":{"line":347,"column":57}},"47":{"start":{"line":352,"column":8},"end":{"line":358,"column":9}},"48":{"start":{"line":354,"column":12},"end":{"line":354,"column":83}},"49":{"start":{"line":357,"column":12},"end":{"line":357,"column":65}},"50":{"start":{"line":361,"column":8},"end":{"line":367,"column":9}},"51":{"start":{"line":363,"column":12},"end":{"line":363,"column":75}},"52":{"start":{"line":366,"column":12},"end":{"line":366,"column":57}},"53":{"start":{"line":370,"column":8},"end":{"line":376,"column":9}},"54":{"start":{"line":372,"column":12},"end":{"line":372,"column":73}},"55":{"start":{"line":375,"column":12},"end":{"line":375,"column":55}},"56":{"start":{"line":379,"column":8},"end":{"line":385,"column":9}},"57":{"start":{"line":381,"column":12},"end":{"line":381,"column":61}},"58":{"start":{"line":384,"column":12},"end":{"line":384,"column":43}},"59":{"start":{"line":389,"column":8},"end":{"line":389,"column":20}},"60":{"start":{"line":405,"column":12},"end":{"line":445,"column":5}},"61":{"start":{"line":408,"column":8},"end":{"line":408,"column":28}},"62":{"start":{"line":416,"column":8},"end":{"line":428,"column":9}},"63":{"start":{"line":419,"column":12},"end":{"line":419,"column":43}},"64":{"start":{"line":421,"column":12},"end":{"line":421,"column":81}},"65":{"start":{"line":423,"column":12},"end":{"line":423,"column":45}},"66":{"start":{"line":427,"column":12},"end":{"line":427,"column":27}},"67":{"start":{"line":429,"column":8},"end":{"line":441,"column":9}},"68":{"start":{"line":432,"column":12},"end":{"line":432,"column":43}},"69":{"start":{"line":434,"column":12},"end":{"line":434,"column":81}},"70":{"start":{"line":436,"column":12},"end":{"line":436,"column":39}},"71":{"start":{"line":440,"column":12},"end":{"line":440,"column":28}},"72":{"start":{"line":443,"column":8},"end":{"line":443,"column":19}},"73":{"start":{"line":463,"column":4},"end":{"line":476,"column":5}},"74":{"start":{"line":465,"column":8},"end":{"line":465,"column":50}},"75":{"start":{"line":466,"column":8},"end":{"line":466,"column":58}},"76":{"start":{"line":468,"column":8},"end":{"line":468,"column":48}},"77":{"start":{"line":469,"column":8},"end":{"line":469,"column":54}},"78":{"start":{"line":471,"column":8},"end":{"line":475,"column":9}},"79":{"start":{"line":472,"column":12},"end":{"line":472,"column":25}},"80":{"start":{"line":474,"column":12},"end":{"line":474,"column":28}},"81":{"start":{"line":500,"column":4},"end":{"line":519,"column":5}},"82":{"start":{"line":502,"column":8},"end":{"line":502,"column":50}},"83":{"start":{"line":503,"column":8},"end":{"line":503,"column":58}},"84":{"start":{"line":507,"column":8},"end":{"line":507,"column":51}},"85":{"start":{"line":509,"column":8},"end":{"line":509,"column":68}},"86":{"start":{"line":512,"column":8},"end":{"line":518,"column":9}},"87":{"start":{"line":513,"column":12},"end":{"line":513,"column":110}},"88":{"start":{"line":514,"column":15},"end":{"line":518,"column":9}},"89":{"start":{"line":515,"column":12},"end":{"line":515,"column":113}},"90":{"start":{"line":517,"column":12},"end":{"line":517,"column":65}},"91":{"start":{"line":533,"column":12},"end":{"line":603,"column":5}},"92":{"start":{"line":553,"column":8},"end":{"line":584,"column":10}},"93":{"start":{"line":555,"column":12},"end":{"line":555,"column":33}},"94":{"start":{"line":556,"column":12},"end":{"line":556,"column":34}},"95":{"start":{"line":557,"column":12},"end":{"line":557,"column":33}},"96":{"start":{"line":558,"column":12},"end":{"line":558,"column":30}},"97":{"start":{"line":559,"column":12},"end":{"line":559,"column":27}},"98":{"start":{"line":560,"column":12},"end":{"line":560,"column":27}},"99":{"start":{"line":562,"column":12},"end":{"line":562,"column":26}},"100":{"start":{"line":563,"column":12},"end":{"line":563,"column":27}},"101":{"start":{"line":565,"column":12},"end":{"line":583,"column":13}},"102":{"start":{"line":566,"column":16},"end":{"line":571,"column":17}},"103":{"start":{"line":567,"column":20},"end":{"line":567,"column":73}},"104":{"start":{"line":568,"column":20},"end":{"line":568,"column":45}},"105":{"start":{"line":569,"column":20},"end":{"line":569,"column":46}},"106":{"start":{"line":570,"column":20},"end":{"line":570,"column":72}},"107":{"start":{"line":572,"column":16},"end":{"line":572,"column":33}},"108":{"start":{"line":573,"column":19},"end":{"line":583,"column":13}},"109":{"start":{"line":574,"column":16},"end":{"line":579,"column":21}},"110":{"start":{"line":575,"column":20},"end":{"line":575,"column":61}},"111":{"start":{"line":576,"column":20},"end":{"line":576,"column":45}},"112":{"start":{"line":577,"column":20},"end":{"line":577,"column":45}},"113":{"start":{"line":578,"column":20},"end":{"line":578,"column":72}},"114":{"start":{"line":580,"column":16},"end":{"line":580,"column":33}},"115":{"start":{"line":582,"column":16},"end":{"line":582,"column":133}},"116":{"start":{"line":591,"column":8},"end":{"line":591,"column":49}},"117":{"start":{"line":593,"column":8},"end":{"line":593,"column":63}},"118":{"start":{"line":595,"column":8},"end":{"line":601,"column":30}},"119":{"start":{"line":602,"column":9},"end":{"line":602,"column":20}},"120":{"start":{"line":618,"column":12},"end":{"line":634,"column":5}},"121":{"start":{"line":622,"column":8},"end":{"line":627,"column":9}},"122":{"start":{"line":624,"column":12},"end":{"line":624,"column":106}},"123":{"start":{"line":626,"column":12},"end":{"line":626,"column":95}},"124":{"start":{"line":630,"column":8},"end":{"line":630,"column":45}},"125":{"start":{"line":632,"column":8},"end":{"line":632,"column":58}},"126":{"start":{"line":652,"column":12},"end":{"line":674,"column":5}},"127":{"start":{"line":655,"column":8},"end":{"line":655,"column":30}},"128":{"start":{"line":656,"column":8},"end":{"line":656,"column":31}},"129":{"start":{"line":657,"column":8},"end":{"line":657,"column":27}},"130":{"start":{"line":659,"column":8},"end":{"line":670,"column":9}},"131":{"start":{"line":660,"column":12},"end":{"line":660,"column":68}},"132":{"start":{"line":661,"column":12},"end":{"line":661,"column":42}},"133":{"start":{"line":662,"column":12},"end":{"line":662,"column":57}},"134":{"start":{"line":663,"column":15},"end":{"line":670,"column":9}},"135":{"start":{"line":664,"column":12},"end":{"line":664,"column":68}},"136":{"start":{"line":665,"column":12},"end":{"line":665,"column":42}},"137":{"start":{"line":666,"column":12},"end":{"line":666,"column":57}},"138":{"start":{"line":668,"column":12},"end":{"line":669,"column":78}},"139":{"start":{"line":671,"column":8},"end":{"line":671,"column":131}},"140":{"start":{"line":672,"column":8},"end":{"line":672,"column":26}},"141":{"start":{"line":682,"column":12},"end":{"line":698,"column":5}},"142":{"start":{"line":684,"column":8},"end":{"line":684,"column":25}},"143":{"start":{"line":687,"column":8},"end":{"line":691,"column":9}},"144":{"start":{"line":687,"column":13},"end":{"line":687,"column":21}},"145":{"start":{"line":688,"column":12},"end":{"line":690,"column":13}},"146":{"start":{"line":689,"column":16},"end":{"line":689,"column":44}},"147":{"start":{"line":693,"column":8},"end":{"line":693,"column":27}},"148":{"start":{"line":695,"column":8},"end":{"line":697,"column":9}},"149":{"start":{"line":695,"column":13},"end":{"line":695,"column":21}},"150":{"start":{"line":696,"column":12},"end":{"line":696,"column":57}},"151":{"start":{"line":713,"column":4},"end":{"line":736,"column":5}},"152":{"start":{"line":715,"column":8},"end":{"line":715,"column":43}},"153":{"start":{"line":716,"column":8},"end":{"line":716,"column":32}},"154":{"start":{"line":717,"column":8},"end":{"line":717,"column":40}},"155":{"start":{"line":719,"column":8},"end":{"line":719,"column":48}},"156":{"start":{"line":720,"column":8},"end":{"line":720,"column":54}},"157":{"start":{"line":723,"column":8},"end":{"line":723,"column":51}},"158":{"start":{"line":725,"column":8},"end":{"line":725,"column":81}},"159":{"start":{"line":727,"column":8},"end":{"line":727,"column":32}},"160":{"start":{"line":729,"column":8},"end":{"line":735,"column":9}},"161":{"start":{"line":730,"column":12},"end":{"line":731,"column":65}},"162":{"start":{"line":733,"column":12},"end":{"line":734,"column":68}},"163":{"start":{"line":745,"column":11},"end":{"line":930,"column":5}},"164":{"start":{"line":748,"column":8},"end":{"line":758,"column":10}},"165":{"start":{"line":755,"column":12},"end":{"line":755,"column":80}},"166":{"start":{"line":757,"column":12},"end":{"line":757,"column":49}},"167":{"start":{"line":761,"column":8},"end":{"line":780,"column":10}},"168":{"start":{"line":767,"column":12},"end":{"line":767,"column":80}},"169":{"start":{"line":770,"column":12},"end":{"line":770,"column":48}},"170":{"start":{"line":774,"column":12},"end":{"line":778,"column":15}},"171":{"start":{"line":775,"column":16},"end":{"line":777,"column":17}},"172":{"start":{"line":776,"column":20},"end":{"line":776,"column":54}},"173":{"start":{"line":783,"column":8},"end":{"line":789,"column":10}},"174":{"start":{"line":786,"column":12},"end":{"line":786,"column":71}},"175":{"start":{"line":787,"column":12},"end":{"line":787,"column":50}},"176":{"start":{"line":788,"column":12},"end":{"line":788,"column":64}},"177":{"start":{"line":792,"column":8},"end":{"line":798,"column":10}},"178":{"start":{"line":795,"column":12},"end":{"line":795,"column":71}},"179":{"start":{"line":796,"column":12},"end":{"line":796,"column":50}},"180":{"start":{"line":797,"column":12},"end":{"line":797,"column":63}},"181":{"start":{"line":802,"column":8},"end":{"line":802,"column":24}},"182":{"start":{"line":806,"column":8},"end":{"line":808,"column":36}},"183":{"start":{"line":812,"column":8},"end":{"line":815,"column":31}},"184":{"start":{"line":818,"column":8},"end":{"line":818,"column":34}},"185":{"start":{"line":819,"column":8},"end":{"line":819,"column":36}},"186":{"start":{"line":820,"column":8},"end":{"line":820,"column":46}},"187":{"start":{"line":821,"column":8},"end":{"line":821,"column":46}},"188":{"start":{"line":828,"column":8},"end":{"line":847,"column":19}},"189":{"start":{"line":831,"column":54},"end":{"line":831,"column":94}},"190":{"start":{"line":832,"column":50},"end":{"line":832,"column":79}},"191":{"start":{"line":833,"column":56},"end":{"line":833,"column":87}},"192":{"start":{"line":834,"column":52},"end":{"line":834,"column":95}},"193":{"start":{"line":839,"column":20},"end":{"line":839,"column":43}},"194":{"start":{"line":840,"column":20},"end":{"line":840,"column":54}},"195":{"start":{"line":845,"column":20},"end":{"line":845,"column":43}},"196":{"start":{"line":846,"column":20},"end":{"line":846,"column":53}},"197":{"start":{"line":852,"column":8},"end":{"line":868,"column":15}},"198":{"start":{"line":860,"column":16},"end":{"line":860,"column":39}},"199":{"start":{"line":861,"column":16},"end":{"line":861,"column":50}},"200":{"start":{"line":866,"column":16},"end":{"line":866,"column":39}},"201":{"start":{"line":867,"column":16},"end":{"line":867,"column":49}},"202":{"start":{"line":871,"column":8},"end":{"line":874,"column":57}},"203":{"start":{"line":874,"column":39},"end":{"line":874,"column":53}},"204":{"start":{"line":877,"column":8},"end":{"line":879,"column":80}},"205":{"start":{"line":879,"column":44},"end":{"line":879,"column":76}},"206":{"start":{"line":882,"column":8},"end":{"line":886,"column":34}},"207":{"start":{"line":884,"column":48},"end":{"line":884,"column":80}},"208":{"start":{"line":885,"column":50},"end":{"line":885,"column":113}},"209":{"start":{"line":889,"column":8},"end":{"line":921,"column":11}},"210":{"start":{"line":897,"column":12},"end":{"line":897,"column":96}},"211":{"start":{"line":897,"column":56},"end":{"line":897,"column":92}},"212":{"start":{"line":900,"column":12},"end":{"line":910,"column":19}},"213":{"start":{"line":900,"column":57},"end":{"line":900,"column":91}},"214":{"start":{"line":902,"column":20},"end":{"line":902,"column":74}},"215":{"start":{"line":903,"column":20},"end":{"line":909,"column":21}},"216":{"start":{"line":904,"column":24},"end":{"line":904,"column":39}},"217":{"start":{"line":905,"column":27},"end":{"line":909,"column":21}},"218":{"start":{"line":906,"column":24},"end":{"line":906,"column":37}},"219":{"start":{"line":908,"column":24},"end":{"line":908,"column":77}},"220":{"start":{"line":914,"column":12},"end":{"line":914,"column":85}},"221":{"start":{"line":914,"column":49},"end":{"line":914,"column":81}},"222":{"start":{"line":918,"column":12},"end":{"line":918,"column":83}},"223":{"start":{"line":918,"column":50},"end":{"line":918,"column":79}},"224":{"start":{"line":925,"column":8},"end":{"line":925,"column":22}},"225":{"start":{"line":927,"column":8},"end":{"line":927,"column":20}},"226":{"start":{"line":940,"column":14},"end":{"line":952,"column":1}},"227":{"start":{"line":943,"column":8},"end":{"line":943,"column":30}},"228":{"start":{"line":946,"column":8},"end":{"line":948,"column":9}},"229":{"start":{"line":947,"column":12},"end":{"line":947,"column":44}},"230":{"start":{"line":950,"column":8},"end":{"line":950,"column":20}},"231":{"start":{"line":970,"column":11},"end":{"line":983,"column":5}},"232":{"start":{"line":972,"column":8},"end":{"line":972,"column":23}},"233":{"start":{"line":974,"column":8},"end":{"line":981,"column":9}},"234":{"start":{"line":976,"column":12},"end":{"line":976,"column":28}},"235":{"start":{"line":978,"column":12},"end":{"line":978,"column":52}},"236":{"start":{"line":980,"column":12},"end":{"line":980,"column":48}},"237":{"start":{"line":982,"column":8},"end":{"line":982,"column":19}},"238":{"start":{"line":991,"column":12},"end":{"line":1051,"column":5}},"239":{"start":{"line":995,"column":8},"end":{"line":995,"column":24}},"240":{"start":{"line":997,"column":8},"end":{"line":997,"column":43}},"241":{"start":{"line":1000,"column":8},"end":{"line":1042,"column":10}},"242":{"start":{"line":1001,"column":12},"end":{"line":1004,"column":13}},"243":{"start":{"line":1002,"column":16},"end":{"line":1003,"column":88}},"244":{"start":{"line":1005,"column":12},"end":{"line":1041,"column":13}},"245":{"start":{"line":1007,"column":16},"end":{"line":1007,"column":65}},"246":{"start":{"line":1010,"column":16},"end":{"line":1010,"column":40}},"247":{"start":{"line":1011,"column":16},"end":{"line":1011,"column":40}},"248":{"start":{"line":1015,"column":16},"end":{"line":1019,"column":17}},"249":{"start":{"line":1016,"column":20},"end":{"line":1016,"column":44}},"250":{"start":{"line":1018,"column":20},"end":{"line":1018,"column":52}},"251":{"start":{"line":1023,"column":16},"end":{"line":1027,"column":17}},"252":{"start":{"line":1024,"column":20},"end":{"line":1024,"column":50}},"253":{"start":{"line":1026,"column":20},"end":{"line":1026,"column":58}},"254":{"start":{"line":1031,"column":16},"end":{"line":1035,"column":17}},"255":{"start":{"line":1032,"column":20},"end":{"line":1032,"column":48}},"256":{"start":{"line":1034,"column":20},"end":{"line":1034,"column":50}},"257":{"start":{"line":1037,"column":16},"end":{"line":1037,"column":90}},"258":{"start":{"line":1039,"column":16},"end":{"line":1039,"column":28}},"259":{"start":{"line":1045,"column":8},"end":{"line":1045,"column":45}},"260":{"start":{"line":1048,"column":8},"end":{"line":1048,"column":27}},"261":{"start":{"line":1068,"column":12},"end":{"line":1097,"column":5}},"262":{"start":{"line":1071,"column":8},"end":{"line":1071,"column":49}},"263":{"start":{"line":1073,"column":8},"end":{"line":1073,"column":63}},"264":{"start":{"line":1076,"column":8},"end":{"line":1078,"column":9}},"265":{"start":{"line":1077,"column":12},"end":{"line":1077,"column":54}},"266":{"start":{"line":1081,"column":8},"end":{"line":1083,"column":9}},"267":{"start":{"line":1082,"column":12},"end":{"line":1082,"column":48}},"268":{"start":{"line":1086,"column":8},"end":{"line":1088,"column":9}},"269":{"start":{"line":1087,"column":12},"end":{"line":1087,"column":55}},"270":{"start":{"line":1091,"column":8},"end":{"line":1093,"column":9}},"271":{"start":{"line":1092,"column":12},"end":{"line":1092,"column":50}},"272":{"start":{"line":1095,"column":8},"end":{"line":1095,"column":20}},"273":{"start":{"line":1113,"column":12},"end":{"line":1138,"column":5}},"274":{"start":{"line":1117,"column":8},"end":{"line":1136,"column":9}},"275":{"start":{"line":1117,"column":13},"end":{"line":1117,"column":21}},"276":{"start":{"line":1118,"column":12},"end":{"line":1118,"column":32}},"277":{"start":{"line":1119,"column":12},"end":{"line":1119,"column":32}},"278":{"start":{"line":1120,"column":12},"end":{"line":1120,"column":44}},"279":{"start":{"line":1121,"column":12},"end":{"line":1135,"column":13}},"280":{"start":{"line":1124,"column":16},"end":{"line":1124,"column":68}},"281":{"start":{"line":1125,"column":19},"end":{"line":1135,"column":13}},"282":{"start":{"line":1127,"column":16},"end":{"line":1129,"column":17}},"283":{"start":{"line":1128,"column":20},"end":{"line":1128,"column":51}},"284":{"start":{"line":1130,"column":16},"end":{"line":1132,"column":17}},"285":{"start":{"line":1131,"column":20},"end":{"line":1131,"column":52}},"286":{"start":{"line":1134,"column":16},"end":{"line":1134,"column":106}},"287":{"start":{"line":1137,"column":8},"end":{"line":1137,"column":20}},"288":{"start":{"line":1140,"column":11},"end":{"line":1143,"column":5}},"289":{"start":{"line":1141,"column":8},"end":{"line":1141,"column":59}},"290":{"start":{"line":1142,"column":8},"end":{"line":1142,"column":60}},"291":{"start":{"line":1151,"column":4},"end":{"line":1153,"column":5}},"292":{"start":{"line":1155,"column":8},"end":{"line":1155,"column":28}},"293":{"start":{"line":1152,"column":8},"end":{"line":1152,"column":30}},"294":{"start":{"line":1162,"column":4},"end":{"line":1164,"column":5}},"295":{"start":{"line":1166,"column":8},"end":{"line":1166,"column":36}},"296":{"start":{"line":1163,"column":8},"end":{"line":1163,"column":46}},"297":{"start":{"line":1172,"column":4},"end":{"line":1174,"column":5}},"298":{"start":{"line":1176,"column":8},"end":{"line":1176,"column":28}},"299":{"start":{"line":1173,"column":8},"end":{"line":1173,"column":30}},"300":{"start":{"line":1183,"column":4},"end":{"line":1185,"column":5}},"301":{"start":{"line":1187,"column":8},"end":{"line":1187,"column":34}},"302":{"start":{"line":1184,"column":8},"end":{"line":1184,"column":42}},"303":{"start":{"line":1194,"column":4},"end":{"line":1196,"column":5}},"304":{"start":{"line":1198,"column":8},"end":{"line":1198,"column":29}},"305":{"start":{"line":1195,"column":8},"end":{"line":1195,"column":32}},"306":{"start":{"line":1204,"column":4},"end":{"line":1206,"column":5}},"307":{"start":{"line":1208,"column":8},"end":{"line":1208,"column":34}},"308":{"start":{"line":1205,"column":8},"end":{"line":1205,"column":42}},"309":{"start":{"line":1215,"column":4},"end":{"line":1217,"column":5}},"310":{"start":{"line":1216,"column":8},"end":{"line":1216,"column":25}},"311":{"start":{"line":149,"column":19},"end":{"line":215,"column":6}},"312":{"start":{"line":1220,"column":0},"end":{"line":1220,"column":1}},"313":{"start":{"line":27,"column":13},"end":{"line":1220,"column":1}}},"fnMap":{"1":{"name":"(anonymous_9)","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"MetroChart","line":228,"loc":{"start":{"line":228,"column":4},"end":{"line":228,"column":58}}},"3":{"name":"(anonymous_11)","line":253,"loc":{"start":{"line":253,"column":42},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_12)","line":262,"loc":{"start":{"line":262,"column":4},"end":{"line":null,"column":-1}}},"5":{"name":"(anonymous_13)","line":282,"loc":{"start":{"line":282,"column":4},"end":{"line":282,"column":47}}},"6":{"name":"(anonymous_14)","line":405,"loc":{"start":{"line":405,"column":4},"end":{"line":405,"column":41}}},"7":{"name":"(anonymous_15)","line":463,"loc":{"start":{"line":463,"column":4},"end":{"line":463,"column":41}}},"8":{"name":"(anonymous_16)","line":500,"loc":{"start":{"line":500,"column":4},"end":{"line":500,"column":39}}},"9":{"name":"(anonymous_17)","line":533,"loc":{"start":{"line":533,"column":4},"end":{"line":533,"column":42}}},"10":{"name":"(anonymous_18)","line":553,"loc":{"start":{"line":553,"column":34},"end":{"line":553,"column":88}}},"11":{"name":"(anonymous_19)","line":618,"loc":{"start":{"line":618,"column":4},"end":{"line":618,"column":45}}},"12":{"name":"(anonymous_20)","line":652,"loc":{"start":{"line":652,"column":4},"end":{"line":652,"column":68}}},"13":{"name":"(anonymous_21)","line":682,"loc":{"start":{"line":682,"column":4},"end":{"line":null,"column":-1}}},"14":{"name":"(anonymous_22)","line":713,"loc":{"start":{"line":713,"column":4},"end":{"line":713,"column":37}}},"15":{"name":"(anonymous_23)","line":745,"loc":{"start":{"line":745,"column":4},"end":{"line":null,"column":-1}}},"16":{"name":"(anonymous_24)","line":748,"loc":{"start":{"line":748,"column":34},"end":{"line":748,"column":58}}},"17":{"name":"(anonymous_25)","line":761,"loc":{"start":{"line":761,"column":35},"end":{"line":761,"column":59}}},"18":{"name":"(anonymous_26)","line":774,"loc":{"start":{"line":774,"column":51},"end":{"line":null,"column":-1}}},"19":{"name":"(anonymous_27)","line":783,"loc":{"start":{"line":783,"column":34},"end":{"line":783,"column":58}}},"20":{"name":"(anonymous_28)","line":792,"loc":{"start":{"line":792,"column":35},"end":{"line":792,"column":59}}},"21":{"name":"(anonymous_29)","line":831,"loc":{"start":{"line":831,"column":31},"end":{"line":831,"column":51}}},"22":{"name":"(anonymous_30)","line":832,"loc":{"start":{"line":832,"column":27},"end":{"line":832,"column":47}}},"23":{"name":"(anonymous_31)","line":833,"loc":{"start":{"line":833,"column":33},"end":{"line":833,"column":53}}},"24":{"name":"(anonymous_32)","line":834,"loc":{"start":{"line":834,"column":29},"end":{"line":834,"column":49}}},"25":{"name":"(anonymous_33)","line":835,"loc":{"start":{"line":835,"column":33},"end":{"line":null,"column":-1}}},"26":{"name":"(anonymous_34)","line":841,"loc":{"start":{"line":841,"column":32},"end":{"line":null,"column":-1}}},"27":{"name":"(anonymous_35)","line":856,"loc":{"start":{"line":856,"column":29},"end":{"line":null,"column":-1}}},"28":{"name":"(anonymous_36)","line":862,"loc":{"start":{"line":862,"column":28},"end":{"line":null,"column":-1}}},"29":{"name":"(anonymous_37)","line":874,"loc":{"start":{"line":874,"column":18},"end":{"line":874,"column":36}}},"30":{"name":"(anonymous_38)","line":879,"loc":{"start":{"line":879,"column":23},"end":{"line":879,"column":41}}},"31":{"name":"(anonymous_39)","line":884,"loc":{"start":{"line":884,"column":27},"end":{"line":884,"column":45}}},"32":{"name":"(anonymous_40)","line":885,"loc":{"start":{"line":885,"column":29},"end":{"line":885,"column":47}}},"33":{"name":"(anonymous_41)","line":889,"loc":{"start":{"line":889,"column":25},"end":{"line":889,"column":35}}},"34":{"name":"(anonymous_42)","line":897,"loc":{"start":{"line":897,"column":35},"end":{"line":897,"column":53}}},"35":{"name":"(anonymous_43)","line":900,"loc":{"start":{"line":900,"column":36},"end":{"line":900,"column":54}}},"36":{"name":"(anonymous_44)","line":901,"loc":{"start":{"line":901,"column":38},"end":{"line":901,"column":56}}},"37":{"name":"(anonymous_45)","line":914,"loc":{"start":{"line":914,"column":28},"end":{"line":914,"column":46}}},"38":{"name":"(anonymous_46)","line":918,"loc":{"start":{"line":918,"column":27},"end":{"line":918,"column":47}}},"39":{"name":"(anonymous_47)","line":940,"loc":{"start":{"line":940,"column":4},"end":{"line":null,"column":-1}}},"40":{"name":"(anonymous_48)","line":970,"loc":{"start":{"line":970,"column":4},"end":{"line":970,"column":33}}},"41":{"name":"(anonymous_49)","line":991,"loc":{"start":{"line":991,"column":4},"end":{"line":null,"column":-1}}},"42":{"name":"(anonymous_50)","line":1000,"loc":{"start":{"line":1000,"column":37},"end":{"line":null,"column":-1}}},"43":{"name":"(anonymous_51)","line":1068,"loc":{"start":{"line":1068,"column":4},"end":{"line":1068,"column":43}}},"44":{"name":"(anonymous_52)","line":1113,"loc":{"start":{"line":1113,"column":4},"end":{"line":null,"column":-1}}},"45":{"name":"(anonymous_53)","line":1140,"loc":{"start":{"line":1140,"column":4},"end":{"line":null,"column":-1}}},"46":{"name":"(anonymous_54)","line":1154,"loc":{"start":{"line":1154,"column":4},"end":{"line":null,"column":-1}}},"47":{"name":"(anonymous_55)","line":1151,"loc":{"start":{"line":1151,"column":4},"end":{"line":1151,"column":38}}},"48":{"name":"(anonymous_56)","line":1165,"loc":{"start":{"line":1165,"column":4},"end":{"line":null,"column":-1}}},"49":{"name":"(anonymous_57)","line":1162,"loc":{"start":{"line":1162,"column":4},"end":{"line":1162,"column":53}}},"50":{"name":"(anonymous_58)","line":1175,"loc":{"start":{"line":1175,"column":4},"end":{"line":null,"column":-1}}},"51":{"name":"(anonymous_59)","line":1172,"loc":{"start":{"line":1172,"column":4},"end":{"line":1172,"column":36}}},"52":{"name":"(anonymous_60)","line":1186,"loc":{"start":{"line":1186,"column":4},"end":{"line":null,"column":-1}}},"53":{"name":"(anonymous_61)","line":1183,"loc":{"start":{"line":1183,"column":4},"end":{"line":1183,"column":48}}},"54":{"name":"(anonymous_62)","line":1197,"loc":{"start":{"line":1197,"column":4},"end":{"line":null,"column":-1}}},"55":{"name":"(anonymous_63)","line":1194,"loc":{"start":{"line":1194,"column":4},"end":{"line":1194,"column":38}}},"56":{"name":"(anonymous_64)","line":1207,"loc":{"start":{"line":1207,"column":4},"end":{"line":null,"column":-1}}},"57":{"name":"(anonymous_65)","line":1204,"loc":{"start":{"line":1204,"column":4},"end":{"line":1204,"column":48}}},"58":{"name":"(anonymous_66)","line":1215,"loc":{"start":{"line":1215,"column":4},"end":{"line":null,"column":-1}}}},"branchMap":{"1":{"line":9,"type":"cond-expr","locations":[{"start":{"line":9,"column":12},"end":{"line":null,"column":-1}},{"start":{"line":9,"column":12},"end":{"line":null,"column":-1}}]},"2":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":8},"end":{"line":242,"column":7}},{"start":{"line":242,"column":8},"end":{"line":242,"column":7}}]},"3":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":8},"end":{"line":287,"column":7}},{"start":{"line":287,"column":8},"end":{"line":287,"column":7}}]},"4":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":8},"end":{"line":302,"column":7}},{"start":{"line":302,"column":8},"end":{"line":302,"column":7}}]},"5":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":8},"end":{"line":312,"column":7}},{"start":{"line":312,"column":8},"end":{"line":312,"column":7}}]},"6":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":8},"end":{"line":322,"column":7}},{"start":{"line":322,"column":8},"end":{"line":322,"column":7}}]},"7":{"line":332,"type":"if","locations":[{"start":{"line":332,"column":8},"end":{"line":332,"column":7}},{"start":{"line":332,"column":8},"end":{"line":332,"column":7}}]},"8":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":8},"end":{"line":342,"column":7}},{"start":{"line":342,"column":8},"end":{"line":342,"column":7}}]},"9":{"line":352,"type":"if","locations":[{"start":{"line":352,"column":8},"end":{"line":352,"column":7}},{"start":{"line":352,"column":8},"end":{"line":352,"column":7}}]},"10":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":8},"end":{"line":361,"column":7}},{"start":{"line":361,"column":8},"end":{"line":361,"column":7}}]},"11":{"line":370,"type":"if","locations":[{"start":{"line":370,"column":8},"end":{"line":370,"column":7}},{"start":{"line":370,"column":8},"end":{"line":370,"column":7}}]},"12":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":8},"end":{"line":379,"column":7}},{"start":{"line":379,"column":8},"end":{"line":379,"column":7}}]},"13":{"line":416,"type":"if","locations":[{"start":{"line":416,"column":8},"end":{"line":416,"column":7}},{"start":{"line":416,"column":8},"end":{"line":416,"column":7}}]},"14":{"line":429,"type":"if","locations":[{"start":{"line":429,"column":8},"end":{"line":429,"column":7}},{"start":{"line":429,"column":8},"end":{"line":429,"column":7}}]},"15":{"line":471,"type":"if","locations":[{"start":{"line":471,"column":8},"end":{"line":471,"column":7}},{"start":{"line":471,"column":8},"end":{"line":471,"column":7}}]},"16":{"line":512,"type":"if","locations":[{"start":{"line":512,"column":8},"end":{"line":512,"column":7}},{"start":{"line":512,"column":8},"end":{"line":512,"column":7}}]},"17":{"line":514,"type":"if","locations":[{"start":{"line":514,"column":15},"end":{"line":514,"column":14}},{"start":{"line":514,"column":15},"end":{"line":514,"column":14}}]},"18":{"line":565,"type":"if","locations":[{"start":{"line":565,"column":12},"end":{"line":565,"column":11}},{"start":{"line":565,"column":12},"end":{"line":565,"column":11}}]},"19":{"line":573,"type":"if","locations":[{"start":{"line":573,"column":19},"end":{"line":573,"column":18}},{"start":{"line":573,"column":19},"end":{"line":573,"column":18}}]},"20":{"line":622,"type":"if","locations":[{"start":{"line":622,"column":8},"end":{"line":622,"column":7}},{"start":{"line":622,"column":8},"end":{"line":622,"column":7}}]},"21":{"line":622,"type":"binary-expr","locations":[{"start":{"line":622,"column":12},"end":{"line":622,"column":41}},{"start":{"line":622,"column":45},"end":{"line":622,"column":73}}]},"22":{"line":659,"type":"if","locations":[{"start":{"line":659,"column":8},"end":{"line":659,"column":7}},{"start":{"line":659,"column":8},"end":{"line":659,"column":7}}]},"23":{"line":663,"type":"if","locations":[{"start":{"line":663,"column":15},"end":{"line":663,"column":14}},{"start":{"line":663,"column":15},"end":{"line":663,"column":14}}]},"24":{"line":688,"type":"if","locations":[{"start":{"line":688,"column":12},"end":{"line":688,"column":11}},{"start":{"line":688,"column":12},"end":{"line":688,"column":11}}]},"25":{"line":729,"type":"if","locations":[{"start":{"line":729,"column":8},"end":{"line":729,"column":7}},{"start":{"line":729,"column":8},"end":{"line":729,"column":7}}]},"26":{"line":775,"type":"if","locations":[{"start":{"line":775,"column":16},"end":{"line":775,"column":15}},{"start":{"line":775,"column":16},"end":{"line":775,"column":15}}]},"27":{"line":903,"type":"if","locations":[{"start":{"line":903,"column":20},"end":{"line":903,"column":19}},{"start":{"line":903,"column":20},"end":{"line":903,"column":19}}]},"28":{"line":905,"type":"if","locations":[{"start":{"line":905,"column":27},"end":{"line":905,"column":26}},{"start":{"line":905,"column":27},"end":{"line":905,"column":26}}]},"29":{"line":974,"type":"if","locations":[{"start":{"line":974,"column":8},"end":{"line":974,"column":7}},{"start":{"line":974,"column":8},"end":{"line":974,"column":7}}]},"30":{"line":974,"type":"binary-expr","locations":[{"start":{"line":974,"column":12},"end":{"line":974,"column":46}},{"start":{"line":974,"column":50},"end":{"line":974,"column":74}}]},"31":{"line":1001,"type":"if","locations":[{"start":{"line":1001,"column":12},"end":{"line":1001,"column":11}},{"start":{"line":1001,"column":12},"end":{"line":1001,"column":11}}]},"32":{"line":1005,"type":"if","locations":[{"start":{"line":1005,"column":12},"end":{"line":1005,"column":11}},{"start":{"line":1005,"column":12},"end":{"line":1005,"column":11}}]},"33":{"line":1005,"type":"binary-expr","locations":[{"start":{"line":1005,"column":16},"end":{"line":1005,"column":40}},{"start":{"line":1005,"column":44},"end":{"line":1005,"column":66}}]},"34":{"line":1015,"type":"if","locations":[{"start":{"line":1015,"column":16},"end":{"line":1015,"column":15}},{"start":{"line":1015,"column":16},"end":{"line":1015,"column":15}}]},"35":{"line":1023,"type":"if","locations":[{"start":{"line":1023,"column":16},"end":{"line":1023,"column":15}},{"start":{"line":1023,"column":16},"end":{"line":1023,"column":15}}]},"36":{"line":1031,"type":"if","locations":[{"start":{"line":1031,"column":16},"end":{"line":1031,"column":15}},{"start":{"line":1031,"column":16},"end":{"line":1031,"column":15}}]},"37":{"line":1076,"type":"if","locations":[{"start":{"line":1076,"column":8},"end":{"line":1076,"column":7}},{"start":{"line":1076,"column":8},"end":{"line":1076,"column":7}}]},"38":{"line":1081,"type":"if","locations":[{"start":{"line":1081,"column":8},"end":{"line":1081,"column":7}},{"start":{"line":1081,"column":8},"end":{"line":1081,"column":7}}]},"39":{"line":1086,"type":"if","locations":[{"start":{"line":1086,"column":8},"end":{"line":1086,"column":7}},{"start":{"line":1086,"column":8},"end":{"line":1086,"column":7}}]},"40":{"line":1091,"type":"if","locations":[{"start":{"line":1091,"column":8},"end":{"line":1091,"column":7}},{"start":{"line":1091,"column":8},"end":{"line":1091,"column":7}}]},"41":{"line":1121,"type":"if","locations":[{"start":{"line":1121,"column":12},"end":{"line":1121,"column":11}},{"start":{"line":1121,"column":12},"end":{"line":1121,"column":11}}]},"42":{"line":1125,"type":"if","locations":[{"start":{"line":1125,"column":19},"end":{"line":1125,"column":18}},{"start":{"line":1125,"column":19},"end":{"line":1125,"column":18}}]},"43":{"line":1127,"type":"if","locations":[{"start":{"line":1127,"column":16},"end":{"line":1127,"column":15}},{"start":{"line":1127,"column":16},"end":{"line":1127,"column":15}}]},"44":{"line":1127,"type":"binary-expr","locations":[{"start":{"line":1127,"column":20},"end":{"line":1127,"column":50}},{"start":{"line":1127,"column":54},"end":{"line":1127,"column":95}}]},"45":{"line":1130,"type":"if","locations":[{"start":{"line":1130,"column":16},"end":{"line":1130,"column":15}},{"start":{"line":1130,"column":16},"end":{"line":1130,"column":15}}]},"46":{"line":1130,"type":"binary-expr","locations":[{"start":{"line":1130,"column":20},"end":{"line":1130,"column":51}},{"start":{"line":1130,"column":55},"end":{"line":1130,"column":97}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":1,"121":0,"122":0,"123":0,"124":0,"125":0,"126":1,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":1,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":1,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":1,"227":0,"228":0,"229":0,"230":0,"231":1,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":1,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":1,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":1,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":1,"289":0,"290":0,"291":1,"292":0,"293":0,"294":1,"295":0,"296":0,"297":1,"298":0,"299":0,"300":1,"301":0,"302":0,"303":1,"304":0,"305":0,"306":1,"307":0,"308":0,"309":1,"310":0,"311":1,"312":1,"313":1},"b":{"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0},"code":"\r\nimport {MetroChartData} from './metrochartdata';\r\nimport {MetroChartError} from './metrocharterror';\r\nimport {MetroLine} from './metroline';\r\nimport {Options} from './options';\r\nimport {Station} from './station';\r\n\r\n\r\nimport 'd3';\r\n\r\n/**\n * <p>\n * A MetroChart is a force-directed graph. Being a graph, it is made up of nodes\n * and links. The nodes represent stations (see interface {@link Station}) while\n * the links represent metrolines (see interface {@link MetroLine}).\n * </p>\n *\n * <p>\n * The data may include an attribute <code>time</code> on each node. The property\n * may be used to order nodes along the horizontal axis (by setting\n * <code>this.enableTimeAxis</code> to <code>true</code>). This is convenient\n * for visualizing certain types of data, such as narratives in stories or plays\n * (which character occurs together with which other characters in any given\n * scene, with nodes representing scenes and links representing characters).\n * </p>\n */\nexport class MetroChart {\r\n\n\n\n    /**\n     * The JSON data may include an optional <code>source</code> property (see\n     * interface {@link MetroChartData}). Property <code>this.datasource</code>\n     * stores the data source, or if the data source is omitted from the JSON,\n     * <code>this.datasource</code> is set to <code>'unknown'</code>.\n     */\n    public datasource: string;\n    /**\n     * Identifier of the DOM element such as <code>metrochart</code>, in\r\n     * which to draw the MetroChart.\n     */\n    private elem: string;\r\n    /**\n     *\r\n     */\n    private elemid: HTMLElement;\r\n    /**\n     * The height of the DOM element containing the MetroChart.\n     */\n    private h: number;\n    /**\n     * When the graph is visualized, station names can be displayed in a\n     * reserved area at the top of the visualization as well as at the bottom.\n     * This property sets the height of these reserved areas.\n     */\n    private labelSpaceVert: number;\n    /**\n     * Defines the rotation of the station labels.\n     */\n    private labelRotation: number;\n    /**\n     * The graph is padded to avoid having elements very close to the left-side\n     * and right-side edges of the visualization, or even falling off of it.\n     * This property defines how much padding there is (in pixels). Note that\n     * the bounding box takes into account the padding value.\n     */\n    private padding: {left:number, right:number};\n    /**\n     * When the data represents different entities than metrolines and stations\n     * this property may be used to define an alternative name to identify\n     * metrolines. Let's say your data represents the storyline of a comic book,\n     * then individual frames could be represented by a station, while the\n     * characters that occur in a frame could be represented by a line. In this\n     * case, <code>this.stationlabel</code> could be set to <code>'frame'</code>\n     * and <code>this.linelabel</code> could be set to <code>'character'</code>.\n     */\n    public linelabel: string;\n    /**\n     * The list of links/metrolines, pointing to the indices of two nodes/\n     * stations.\n     */\n    private links: MetroLine[];\n    /**\n     * The list of stations.\n     */\n    private nodes: Station[];\n    /**\n     * When the data represents different entities than metrolines and stations\n     * this property may be used to define an alternative name to identify\n     * stations. Let's say your data represents the storyline of a comic book,\n     * then individual frames could be represented by a station, while the\n     * characters that occur in a frame could be represented by a line. In this\n     * case, <code>this.stationlabel</code> could be set to <code>'frame'</code>\n     * and <code>this.linelabel</code> could be set to <code>'character'</code>.\n     */\n    public stationlabel: string;\n    /**\n     * Radius in pixels used in drawing the station symbols.\n     */\n    public stationShapeRadius: number;\n    /**\n     * The time value corresponding to the left-most pixel.\n     */\n    public timeValueLeft: number;\n    /**\n     * The time value corresponding to the right-most pixel.\n     */\n    public timeValueRight: number;\n    /**\n     * List of strings containing the unique metroline names.\n     */\n    private ulinks: string[];\n    /**\n     * The URL of where the data is located. Data should be compliant with the\n     * {@link MetroChartData} interface.\n     */\n    private _url: string;\n    /**\n     * The width of the DOM element containing the MetroChart.\n     */\n    private w: number;\n    /**\n     * See {@link Options.colors}.\n     */\n    private _colors: string[];\n    /**\n     * Defines the charge parameter of the force-directed graph.\n     */\n    private _charge: number;\n    /**\n     * See {@link Options.enableTimeAxis}.\n     */\n    private _enableTimeAxis: boolean;\n    /**\n     * Defines the gravity parameter of the force-directed graph.\n     */\n    private _gravity: number;\n    /**\n     * Defines the link distance parameter of the force-directed graph.\n     */\n    private _linkDistance: number;\n    /**\n     * Defines the link strength parameter of the force-directed graph.\n     */\n    private _linkStrength: number;\n    /**\n     * See {@link Options}.\n     */\n    private static defaultOptions: Options = {\n        /**\n         * See {@link Options.charge}.\n         */\n        charge: 0,\n        /**\n         * See {@link Options.colors}. Here are the default colors:\n         * <table>\n         *    <tr><td>1.</td><td bgcolor=\"#FF0000\"></td><td>red</td></tr>\n         *    <tr><td>2.</td><td bgcolor=\"#008000\"></td><td>olive</td></tr>\n         *    <tr><td>3.</td><td bgcolor=\"#0080FF\"></td><td>blue</td></tr>\n         *    <tr><td>4.</td><td bgcolor=\"#FF8000\"></td><td>orange</td></tr>\n         *    <tr><td>5.</td><td bgcolor=\"#FF0080\"></td><td>magenta</td></tr>\n         *    <tr><td>6.</td><td bgcolor=\"#FFee00\"></td><td>yellow</td></tr>\n         *    <tr><td>7.</td><td bgcolor=\"#80DD00\"></td><td>lime</td></tr>\n         *    <tr><td>8.</td><td bgcolor=\"#b200ff\"></td><td>purple</td></tr>\n         *    <tr><td>9.</td><td bgcolor=\"#00DD80\"></td><td>seagreen</td></tr>\n         *    <tr><td>10.</td><td bgcolor=\"#888888\"></td><td>dark gray</td></tr>\n         *    <tr><td>11.</td><td bgcolor=\"#000000\"></td><td>black</td></tr>\n         * </table>\n         */\n        colors: [\n            {name: 'red',       hexcode: '#FF0000'},\n            {name: 'olive',     hexcode: '#008000'},\n            {name: 'blue',      hexcode: '#0080FF'},\n            {name: 'orange',    hexcode: '#FF8000'},\n            {name: 'magenta',   hexcode: '#FF0080'},\n            {name: 'yellow',    hexcode: '#FFee00'},\n            {name: 'lime',      hexcode: '#80DD00'},\n            {name: 'purple',    hexcode: '#b200ff'},\n            {name: 'seagreen',  hexcode: '#00DD80'},\n            {name: 'dark gray', hexcode: '#888888'},\n            {name: 'black',     hexcode: '#000000'}\n        ],\n        /**\n         * See {@link Options.enableTimeAxis}.\n         */\n        enableTimeAxis: true,\n        /**\n         * See {@link Options.gravity}.\n         */\n        gravity: 0.0005,\n        /**\n         * See {@link Options.labelSpaceVert}.\n         */\n        labelSpaceVert: 130,\n        /**\n         * See {@link Options.labelRotation}.\n         */\n        labelRotation: -45,\n        /**\n         * See {@link Options.padding}.\n         */\n        padding: {left:50, right:50},\n        /**\n         * See {@link Options.linkDistance}.\n         */\n        linkDistance: 1,\n        /**\n         * See {@link Options.linkStrength}.\n         */\n        linkStrength: 0.0,\n        /**\n         * See {@link Options.stationShapeRadius}.\n         */\n        stationShapeRadius: 7.0\n    };\n\n    /**\n     * Create a new MetroChart instance.\n     * @param {string} elem The name of the DOM element in which you want to\n     * draw the MetroChart.\n     *\n     * @param {string} url The URL of the data file, which should be a JSON file\n     * formatted according to the <code>MetroChartData</code> interface.\n     *\n     * @param {Options} [options] Optional parameter containing the options.\n     *\n     */\n    constructor(elem: string, url:string, options?:Options) {\n\n        // store the string containing the DOM element ID\n        this.elem = elem;\r\n\n        // store the url to the data that was provided by the user\n        this._url = url;\n\n        //\r\n        this.elemid = document.getElementById(this.elem);\r\n\n        // store the width and height of the DOM element we want to draw in\r\n        this.updateWidthHeight();\r\n\r\n        if (typeof options === 'undefined') {\n            this.applyDefaultOptions(MetroChart.defaultOptions);\n        } else {\n            this.applyDefaultOptions(options);\n        }\n\n        // load the data (internally defers to this.drawForceDirectedGraph() )\n        this.loaddata();\r\n\r\n        // beware: JavaScript magic happens here\r\n        let that:MetroChart = this;\r\n        window.addEventListener('resize', function() {\r\n            that.onResize();\r\n        });\r\n\r\n\n    } // end method constructor()\n\n\r\n\r\n    public draw() {\r\n\r\n        // get the current width and height\r\n        this.updateWidthHeight();\r\n        // determine the list of unique line names:\r\n        this.calcUniqueLines();\r\n        // verify the data and add some properties:\r\n        this.verifyData();\r\n        // draw the force directed graph:\r\n        this.drawForceDirectedGraph();\r\n\r\n    }\r\n\r\n\n\n    /**\n     * @param {Options} options User supplied options that override the default\n     * options from {@link MetroChart.defaultOptions}.\n     *\n     */\n    public applyDefaultOptions(options?:Options): MetroChart {\n\n        // set the colors:\n        let colors: string[];\n        colors = [];\n        if (typeof options.colors === 'undefined') {\n            // use default colors\n            for (let color of MetroChart.defaultOptions.colors) {\n                colors.push(color.hexcode);\n            }\n        } else {\n            // use user-supplied colors\n            for (let color of options.colors) {\n                colors.push(color.hexcode);\n            }\n        }\n        this.colors = colors;\n\n\n        // set the force directed graph parameter 'charge'\n        if (typeof options.charge === 'undefined') {\n            // use default\n            this.charge = MetroChart.defaultOptions.charge;\n        } else {\n            // use user supplied value\n            this.charge = options.charge;\n        }\n\n\n        // set the force directed graph parameter 'gravity'\n        if (typeof options.gravity === 'undefined') {\n            // use default\n            this.gravity = MetroChart.defaultOptions.gravity;\n        } else {\n            // use user supplied value\n            this.gravity = options.gravity;\n        }\n\n\n        // set the force directed graph parameter 'linkDistance'\n        if (typeof options.linkDistance === 'undefined') {\n            // use default\n            this.linkDistance = MetroChart.defaultOptions.linkDistance;\n        } else {\n            // use user supplied value\n            this.linkDistance = options.linkDistance;\n        }\n\n\n        // set the force directed graph parameter 'linkStrength'\n        if (typeof options.linkStrength === 'undefined') {\n            // use default\n            this.linkStrength = MetroChart.defaultOptions.linkStrength;\n        } else {\n            // use user supplied value\n            this.linkStrength = options.linkStrength;\n        }\n\n\n        // define whether to enable the time axis\n        if (typeof options.enableTimeAxis === 'undefined') {\n            // use default\n            this.enableTimeAxis = MetroChart.defaultOptions.enableTimeAxis;\n        } else {\n            // use user supplied value\n            this.enableTimeAxis = options.enableTimeAxis;\n        }\n\n\n        // set the radius of the station symbols\n        if (typeof options.stationShapeRadius === 'undefined') {\n            // use default\n            this.stationShapeRadius = MetroChart.defaultOptions.stationShapeRadius;\n        } else {\n            // use user supplied value\n            this.stationShapeRadius = options.stationShapeRadius;\n        }\n\n        // set the vertical space reserved for plotting the station labels\n        if (typeof options.labelSpaceVert === 'undefined') {\n            // use default\n            this.labelSpaceVert = MetroChart.defaultOptions.labelSpaceVert;\n        } else {\n            // use user supplied value\n            this.labelSpaceVert = options.labelSpaceVert;\n        }\n\n        // set the station label rotation\n        if (typeof options.labelRotation === 'undefined') {\n            // use default\n            this.labelRotation = MetroChart.defaultOptions.labelRotation;\n        } else {\n            // use user supplied value\n            this.labelRotation = options.labelRotation;\n        }\n\n        // set the MetroChart's internal spacing (padding)\n        if (typeof options.padding === 'undefined') {\n            // use default\n            this.padding = MetroChart.defaultOptions.padding;\n        } else {\n            // use user supplied value\n            this.padding = options.padding;\n        }\n\n\n\n        return this;\n    } // end method applyDefaultOptions()\n\n\n\n\n    /**\n     * Method to calculate the position of the lines connecting the stations.\n     * The method takes into account how many lines there are at each station,\n     * so the vertical offset can be calculated by <code>this.calcStubOffset()</code>.\n     *\n     * @param {MetroLine} link The link between two Stations.\n     *\n     * @return {string} The SVG path string describing the position of the line.\n     *\n     */\n    private calcLinkShape(link: MetroLine): string {\n        // determine the coordinates of the given link\n\n        let str:string = '';\n\n        // draw straight lines between nodes\n\n        // The first time this method gets called, source and target are\n        // simply integer numbers, not objects with .x and .y properties.\n        // Therefore you need these two if-statements to make sure you don't\n        // generate any errors:\n        if (typeof link.source === 'object') {\n\n            // x-from\n            let xf: number = link.source.x;\n            // y-from\n            let yf: number = link.source.y + this.calcStubOffset(link, 'source');\n\n            str += 'M' + xf + ',' + yf + ' ';\n\n        } else {\n            // starting point of a temporary line (only displayed in the very first frame)\n            str += 'M0,0 ';\n        }\n        if (typeof(link.target) === 'object') {\n\n            // x-to\n            let xt: number = link.target.x;\n            // y-to\n            let yt: number = link.target.y + this.calcStubOffset(link, 'target');\n\n            str += 'L' + xt + ',' + yt;\n\n        } else {\n            // ending point of a temporary line (only displayed in the very first frame)\n            str += 'L10,10';\n        }\n\n        return str;\n\n    } // end method calcLinkShape()\n\n\n\n    /**\n     * When drawing the vertical line from station to label, you need to know\n     * whether to draw to the bottom reserved area or the top reserved area.\n     * This method determines whether the bottom reserved area or the top\n     * reserved area is closest to the position of the station. This is then\n     * used in drawing the station-to-label vertical line, as well as in\n     * calculating the position of the station labels.\n     *\n     * @param  {Station} station The station for which we want to determine\n     * which is closer --the top reserved area or the bottom one.\n     *\n     * @return {string} Either <code>'top'</code> or <code>'bottom'</code>.\n     *\n     */\n    calcLabelTopOrBottom(station: Station):string {\n\n        let yTop:number = 0 + this.labelSpaceVert;\n        let yBottom:number = this.h - this.labelSpaceVert;\n\n        let distToTop:number = station.y - yTop;\n        let distToBottom:number = yBottom - station.y;\n\n        if (distToTop < distToBottom) {\n            return 'top';\n        } else {\n            return 'bottom';\n        }\n    }\n\n\n\n    /**\n     * The stations are labeled with their names. These labels are drawn in\n     * one of two reserved plotting areas, one near the bottom of the graph and\n     * one near the top. This method determines which is closer, and the returns\n     * the translation needed for the label to be correctly placed, i.e.\n     * horizontally aligned with the position of the station, and vertically\n     * aligned so it falls in either the bottom or the top reserved area. The\n     * translation also includes a rotation, which can be set through\n     * MetroChart's options (see {@link Options.labelRotation}).\n     *\n     * @param  {Station} station The station for which you want to draw a\n     * label.\n     *\n     * @return {[type]} The translation that must be applied to position the\n     * label such that it is horizontally aligned with the position of the\n     * station proper, and vertically aligned with the bottom or top reserved\n     * area. The translation also includes a rotation, which can be set through\n     * MetroChart's options (see {@link Options.labelRotation}).\n     *\n     */\n    calcLabelTranslate(station: Station) {\n\n        let yTop:number = 0 + this.labelSpaceVert;\n        let yBottom:number = this.h - this.labelSpaceVert;\n\n\n        // apply the bounding box\n        station = this.observeBoundingBox(station);\n\n        let topOrBottom:string = this.calcLabelTopOrBottom(station);\n\n\n        if (topOrBottom === 'top') {\n            return 'translate(' + station.x + ',' + (yTop - 10 - 15) + ') rotate(' + this.labelRotation + ')';\n        } else if (topOrBottom === 'bottom') {\n            return 'translate(' + station.x + ',' + (yBottom + 10 + 15) + ') rotate(' + this.labelRotation + ')';\n        } else {\n            throw new MetroChartError('This should not happen.');\n        }\n    }\n\n\n\n\n\n    /**\n     * Method that calculates the shape of the station symbol.\n     *\n     * @param {Station} node The station for which to draw a symbol.\n     *\n     * @return {string} String containing the SVG path 'd' data for the\n     * station symbol.\n     */\n    private calcStationShape(node: Station): string {\n\n\n\n\n        /**\n         * Local function that calculates the shape of the station symbol's top\n         * or bottom part.\n         *\n         * @param {number} fromy The y-value of where the arc should start.\n         *\n         * @param {number} r The radius of the arc.\n         *\n         * @param {string} topOrBottomString Whether the method is used to draw\n         * the top part or the bottom part.\n         *\n         * @return {string} String containing the SVG path 'd' data (for the\n         * part that describes the top or bottom arc).\n         *\n         */\n        let calcStationShapeArc = function(fromy:number, r:number, topOrBottomStr:string): string {\n\n            let iSection: number;\n            let nSections: number;\n            let outputStr:string;\r\n            let angle: number;\n            let dx: number;\n            let dy: number;\n\n            nSections = 8;\n            outputStr = '';\n\n            if (topOrBottomStr === 'top') {\n                for (iSection = 0; iSection <= nSections; iSection += 1) {\n                    angle = (nSections - iSection) / nSections * Math.PI;\n                    dx = Math.cos(angle) * r;\n                    dy = Math.sin(angle) * -r;\n                    outputStr += 'L ' + (dx) + ' ' + (fromy + dy) + ' ';\n                }\n                return outputStr;\n            } else if (topOrBottomStr === 'bottom') {\n                for (iSection = 0; iSection < nSections; iSection += 1) {\n                    angle = (iSection) / nSections * Math.PI;\n                    dx = Math.cos(angle) * r;\n                    dy = Math.sin(angle) * r;\n                    outputStr += 'L ' + (dx) + ' ' + (fromy + dy) + ' ';\n                    }\n                return outputStr;\n            } else {\n                throw new MetroChartError(' in .calcStationShapeArc(): \\'Fourth argument should be either \\'top\\' or \\'bottom\\'.\\'');\n            }\n        }; // end local method calcStationShapeArc\n\n\n\n\n\n        // half the width of the entire station symbol\n        let hw: number = this.stationShapeRadius;\n        // half the height of the entire station symbol\n        let hh: number = node.nLines * this.stationShapeRadius;\n\n        let str: string = 'M ' + (-hw) + ' 0 ' +\n                          'L ' + (-hw) + ' ' + ((node.nLines - 1) * -this.stationShapeRadius) + ' ' +\n                          calcStationShapeArc((node.nLines - 1) * -this.stationShapeRadius, this.stationShapeRadius, 'top') +\n                          'L ' + (+hw) + ' ' + ((node.nLines - 1) * this.stationShapeRadius) + ' ' +\n                          calcStationShapeArc((node.nLines - 1) * this.stationShapeRadius, this.stationShapeRadius, 'bottom') +\n                          'L ' + (-hw) + ' ' + ((node.nLines - 1) * this.stationShapeRadius) + ' ' +\n                          'Z';\n         return str;\n    } // end method calcStationShape()\n\n\n\n\n    /**\n     * Method that calculates the translation of the station symbol, while\n     * observing the bounding box set by the dimensions of the SVG area and the\n     * dimension of the station symbols.\n     *\n     * @param {Station} node The station that needs to be translated.\n     *\n     * @return {string} String containing the translate offsets.\n     *\n     */\n    private calcStationTranslate(node:Station): string {\n\n\n        // if nodes have time labels and time axis is enabled, set x-position\n        if (typeof node.time === 'number' && this.enableTimeAxis === true) {\n            // calculate the fraction\n            let f: number = (node.time - this.timeValueLeft) / (this.timeValueRight - this.timeValueLeft);\n\n            node.x = this.padding.left + f * (this.w - this.padding.right - this.padding.left);\n        }\n\n        // apply the bounding box\n        node = this.observeBoundingBox(node);\n\n        return 'translate(' + node.x + ',' + node.y + ')';\n\n    }\n\n\n\n\n    /**\n     * Method to calculate the vertical offset that indicates that there is more\n     * than one line at a station.\n     *\n     * @param {MetroLine} link The link object connecting two stations.\n     *\n     * @param {string} sourceOrTargetString The stub's offset can be different\n     * at the source than at the target nodes, this parameter indicates which we\n     * are currently calculating.\n     *\n     * @return {number} The vertical offset in pixels.\n     *\n     */\n    private calcStubOffset(link: MetroLine, sourceOrTargetStr:string): number {\n        // a node can have multiple lines coming from it. The order is\n        // determined by the current method\n        let stubIndex: number;\n        let stubOffset: number;\n        let nLines: number;\n\n        if (sourceOrTargetStr === 'source') {\n            let linesAtSource = this.nodes[link.source.index].lines;\n            nLines = linesAtSource.length;\n            stubIndex = linesAtSource.indexOf(link.line);\n        } else if (sourceOrTargetStr === 'target') {\n            let linesAtTarget = this.nodes[link.target.index].lines;\n            nLines = linesAtTarget.length;\n            stubIndex = linesAtTarget.indexOf(link.line);\n        } else {\n            throw new MetroChartError(' in .calcStubOffset(): \\'Input argument sh' +\n                                      'ould be \\'source\\' or \\'target\\' .\\'');\n        }\n        stubOffset = -1 * (nLines * this.stationShapeRadius - this.stationShapeRadius) + (stubIndex * 2 * this.stationShapeRadius);\n        return stubOffset;\n\n    }\n\n\n\n\n    /**\n     * Method to calculate the set of unique line names, <code>this.ulinks</code>.\n     */\n    private calcUniqueLines(): void {\n        // initialize the array that is going to hold the unique names of lines\n        this.ulinks = [];\n        // iterate over the links, whenever you see a previously unseen line name,\n        // add it to the list of strings in this.ulinks\n        for (let link of this.links) {\n            if (this.ulinks.indexOf(link.line) === -1 ) {\n                this.ulinks.push(link.line);\n            }\n        }\n        // sort the list of unique line names\n        this.ulinks.sort();\n        // assign the index of each link's line name to property .uindex\n        for (let link of this.links) {\n            link.uindex = this.ulinks.indexOf(link.line);\n        }\n    }\n\n\n    /**\n     * The svg drawing area has two reserved areas, one at the top and one at\n     * the bottom. These area are reserved for labels containing the station\n     * names. This method draws a line between the a node of the graph and the\n     * station label proper.\n     *\n     * @param  {Station} station The node for which line must be drawn to its\n     * label.\n     *\n     * @return {string} The SVG path \"d\" string data.\n     *\n     */\n    calcVerticalLine(station: Station): string {\n\n        let h:number = this.labelSpaceVert;\n        let yTop:number = 0 + h;\n        let yBottom:number = this.h - h;\n\n        let distToTop:number = station.y - yTop;\n        let distToBottom:number = yBottom - station.y;\n\n        // apply the bounding box\n        station = this.observeBoundingBox(station);\n\n        let halfStationHeight: number = station.nLines * this.stationShapeRadius;\n\n        let buffer: number = 30;\n\n        if (distToTop < distToBottom) {\n            return 'M ' + station.x + ' ' + (station.y - halfStationHeight - 5) + ' ' +\n                   'L ' + station.x + ',' + (yTop - buffer + 15);\n        } else {\n            return 'M ' + station.x + ' ' + (station.y + halfStationHeight + 5) + ' ' +\n                   'L ' + station.x + ',' + (yBottom + buffer - 15);\n        }\n    }\n\n\n\n\n\n    /**\n     * Draw/update force-directed metrochart graph using the current settings.\n     */\n    public drawForceDirectedGraph(): MetroChart {\n\n        // define onMouseOutNodeGroup as a local function to the drawForceDirectedGraph() method\n        let onMouseOutNodeGroup = function(eventsource:any) {\r\n            //  Note the d3 selector magic that is applied here. I get the\n            //  source of the event, which is an svg group, and on that\n            //  selection I subselect everything of class 'nodegroup-child' (which\n            //  I set myself when I created the child objects). On that\n            //  selection, I remove the class 'highlight' which was set by\n            //  onMouseOver() using d3's classed method:\n            let children = d3.select(eventsource).selectAll('.nodegroup-child');\n            // remove class 'highlight' from all children:\n            children.classed('highlight', false);\n        };\n\n        // define onMouseOverNodeGroup as a local function to the drawForceDirectedGraph() method\n        let onMouseOverNodeGroup = function(eventsource:any) {\r\n            //  Note the d3 selector magic that is applied here. I get the\n            //  source of the event, which is an svg group, and on that\n            //  selection I subselect everything of class 'nodegroup-child' (which\n            //  I set myself when I created the child objects). On that\n            //  selection, I add a class using d3's classed method:\n            let children = d3.select(eventsource).selectAll('.nodegroup-child');\n            // add the class 'highlight' to all children, so that the element\n            // can be styled using CSS\n            children.classed('highlight', true);\n\n            // bring the svg group that generated the event to the foreground by\n            // re-ordering the '.nodegroup-parent' svg groups\n            d3.selectAll('.nodegroup-parent').each(function(){\n                if (this === eventsource) {\n                    this.parentNode.appendChild(this);\n                };\n            });\n\n        };\n\n        // define onMouseOutMetroLine as a local function to the drawForceDirectedGraph() method\n        let onMouseOutMetroLine = function(eventsource:any) {\r\n            // Here, 'eventsource' refers to the line segment (path)\n            // that generated the event, not the instance of MetroChart!\n            let uindex: number = d3.select(eventsource).datum().uindex;\n            let classname = '.link.line' + uindex;\n            d3.selectAll(classname).classed('highlight', false);\n        };\n\n        // define onMouseOverMetroLine as a local function to the drawForceDirectedGraph() method\n        let onMouseOverMetroLine = function(eventsource:any) {\r\n            // Here, 'eventsource' refers to the line segment (path)\n            // that generated the event, not the instance of MetroChart!\n            let uindex: number = d3.select(eventsource).datum().uindex;\n            let classname = '.link.line' + uindex;\n            d3.selectAll(classname).classed('highlight', true);\n        };\n\r\n\n        // capture the 'this' object:\n        let that = this;\n\n        // select the DOM element to draw in, and set its identifier, as well\r\n        // as its width and height\n        let vis = d3.select(this.elemid).append('svg')\r\n            .attr('width', this.w)\r\n            .attr('height', this.h);\n\n        // initialize the force layout, set its width and height, then update it with\n        // the nodes and links arrays (which initially are empty),\n        let force = d3.layout.force()\n            .size([this.w, this.h])\n            .nodes(this.nodes)\n            .links(this.links);\n\n        // set the directed-graph force parameters:\n        force.charge(this.charge);\n        force.gravity(this.gravity);\n        force.linkDistance(this.linkDistance);\n        force.linkStrength(this.linkStrength);\n\n        // In this next part, the order in which link, vline, node etc are\n        // initialized is significant for which object is drawn on top of which\n        // object\n\n        // initialize the links between stations\n        let link = vis.selectAll('.link')\n            .data(this.links)\n            .enter().append('path')\n                .attr('class', function(d:MetroLine) {return 'link' + ' ' + 'line' + d.uindex; } )\n                .attr('d', function(d:MetroLine) {return that.calcLinkShape(d); })\n                .style('stroke', function(d:MetroLine) {return that.getColor(d.uindex); })\n                .on('click', function(d:MetroLine) {console.log(that.linelabel + ' ' + d.line); })\n                .on('mouseover', function() {\n                    // somehow the 'this' object does not refer to the instance\n                    // of MetroChart here, but to the event that generated the\n                    // mouseover event, in this case the line segment.\n                    let eventsource = this;\n                    onMouseOverMetroLine(eventsource); } )\n                .on('mouseout', function() {\n                    // somehow the 'this' object does not refer to the instance\n                    // of MetroChart here, but to the event that generated the\n                    // mouseout event, in this case the line segment.\n                    let eventsource = this;\n                    onMouseOutMetroLine(eventsource);\n                });\n\n\n        // make a group of class nodegroup that will contain the station symbol,\n        // the vertical line, and the station label:\n        let nodeGroup = vis.selectAll('.node')\n            .data(this.nodes)\n            .enter().append('g')\n            .attr('class', 'nodegroup-parent')\n            .on('mouseover', function() {\n                // somehow the 'this' object does not refer to the instance\n                // of MetroChart here, but to the event that generated the\n                // mouseover event, in this case the svg group element.\n                let eventsource = this;\n                onMouseOverNodeGroup(eventsource); } )\n            .on('mouseout', function() {\n                // somehow the 'this' object does not refer to the instance\n                // of MetroChart here, but to the event that generated the\n                // mouseout event, in this case the svg group element.\n                let eventsource = this;\n                onMouseOutNodeGroup(eventsource);\n            });\n\n        // label the nodes by adding their name as text\n        let label = nodeGroup.append('text')\n            .attr('class', 'label nodegroup-child')\n            .attr('transform', 'translate(0,0) rotate(45)')\n            .text(function(d:Station) {return d.name; });\n\n        // draw a vertical line from each node to its corresponding label:\n        let vline = nodeGroup.append('path')\n            .attr('class', 'vline nodegroup-child')\n            .attr('d', function(d:Station) {return that.calcVerticalLine(d); });\n\n        // draw the station symbol:\n        let node = nodeGroup.append('path')\n                .attr('class', 'node nodegroup-child')\n                .attr('d', function(d:Station) {return that.calcStationShape(d); })\n                .on('click', function(d:Station) {console.log(that.stationlabel + ' ' + d.index + ': ' + d.name); })\n                .call(force.drag);\n\n\n        force.on('tick', function(e) {\n\n            // This is actually a loop in which the force-directing algorithm\n            // adjusts the values of node.x and node.y for all node of\n            // this.nodes. Since you want to have a consistent visualization,\n            // you need to make sure that the other components (i.e. the\n            // metrolines, the station-to-label lines, and the labels) move with\n            // the moving nodes.\n            node.attr('transform', function(d:Station) {return that.calcStationTranslate(d); });\n\n            // update the position of the station labels\n            label.attr('transform', function(d:Station) {return that.calcLabelTranslate(d); })\n                .style('text-anchor', function(d:Station) {\n                    let topOrBottom:string = that.calcLabelTopOrBottom(d);\n                    if (topOrBottom === 'top') {\n                        return 'start';\n                    } else if (topOrBottom === 'bottom') {\n                        return 'end';\n                    } else {\n                        throw new MetroChartError('This should not happen.');\n                    }\n                });\n\n\n            // update the position of the station-to-label vertical lines\n            vline.attr('d', function(d:Station) {return that.calcVerticalLine(d); });\n\n            // for each link of this.links, recalculate the path connecting the stations (since\n            // these were just changed)\n            link.attr('d', function(d:MetroLine) {return that.calcLinkShape(d); });\n\n\n        });\n\n\n        // Restart the layout.\n        force.start();\n\n        return this;\n\n\n    } // end method drawForceDirectedGraph()\n\n\r\n\r\n\r\n    /**\r\n     * When the window is resized, redraw the metrochart graph in its entirety,\r\n     * while observing the new maximum size.\r\n     * @return {[type]} [description]\r\n     */\r\n    protected onResize() {\r\n\r\n        // get the div element that we want to redraw\r\n        let div = this.elemid;\r\n\r\n        // delete the contents of the div\r\n        while (div.firstChild) {\r\n            div.removeChild(div.firstChild);\r\n        }\r\n\r\n        this.draw();\r\n\r\n}\r\n\r\n\r\n\n    /**\n     * Get the color of a line from <code>this.colors</code>, given its index\n     * <code>uindex</code> into <code>this.ulinks</code>. If\n     * <code>this.colors</code> is <code>undefined</code> or zero-length, return\n     * a color string representing 50% gray. If there are not enough colors in\n     * <code>this.colors</code>, use modulo math to determine the appropriate\n     * index into the color table.\n     *\n     * @param {number} uindex Index into <code>this.ulinks</code>\n     *\n     * @return {string} The hexadecimal color string used for drawing\n     * <code>this.ulinks[uindex]</code>.\n     *\n     */\n    public getColor(uindex:number): string {\n\n        let str:string;\n\n        if (typeof this.colors === 'undefined' || this.colors.length === 0) {\n            // in case there are no predefined colors, set all colors to 50% gray\n            str = '#808080';\n        } else {\n            let nColors:number = this.colors.length;\n            // use the modulo-nColors of the uindex value as index into the color table\n            str = this.colors[uindex % nColors];\n        }\n        return str;\n    }\n\n\n\n\n    /**\n     * Method to load the data from <code>this._url</code> using an <code>XMLHttpRequest</code>.\n     */\n    private loaddata() {\n        // load data from local file\n\n        // capture the 'this' object from the current context\n        let that = this;\n\n        let xmlHttp = new XMLHttpRequest();\n\n        // define what to do after the data has been downloaded successfully\n        xmlHttp.onreadystatechange = function() {\n            if (xmlHttp.status === 429) {\n                console.log('Throttle limit exceeded. See \"https://dev.socrata.com/docs/' +\n                            'app-tokens.html#throttling-limits\" for more information.');\n            }\n            if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {\n\n                let data: any = JSON.parse(xmlHttp.responseText);\n\n                // get the nodes and links from the parsed data\n                that.nodes = data.nodes;\n                that.links = data.links;\n\n                // if the data includes an alternative descriptive name for\n                // line, use it, otherwise use 'line'\n                if (typeof data.linelabel === 'undefined') {\n                    that.linelabel = 'line';\n                } else {\n                    that.linelabel = data.linelabel;\n                }\n\n                // if the data includes an alternative descriptive name for\n                // station, use it, otherwise use 'station'\n                if (typeof data.stationlabel === 'undefined') {\n                    that.stationlabel = 'station';\n                } else {\n                    that.stationlabel = data.stationlabel;\n                }\n\n                // if the data includes a data source, use it, otherwise use\n                // 'unknown'\n                if (typeof data.source === 'undefined') {\n                    that.datasource = 'unknown';\n                } else {\n                    that.datasource = data.source;\n                }\n\n                console.log('MetroChart: \\'Done loading data from \"' + that._url + '\"\\'');\r\n\r\n                that.draw();\r\n\n            }\r\n        };\n\n        // make the actual request\n        xmlHttp.open('GET', this._url, true); // true for asynchronous\n\n        // not sure what this is...end the connection?\n        xmlHttp.send(null);\n\n\n    } // end method loaddata()\n\n\n    /**\n     * The graph has nodes of different sizes, depending on how many\n     * metrolines stop at that station. However, you still want the entire\n     * station symbol to remain inside the box defined by the svg drawing area.\n     * This function makes sure that each station remains inside that bounding\n     * box.\n     *\n     * @param {Station} node The station for which the bounding box must be\n     * observed.\n     *\n     * @return {Station} The station with updated .x and .y properties such\n     * that the entire station symbol falls within the bounding box.\n     *\n     */\n    private observeBoundingBox(node:Station):Station {\n\n        // half the width of the entire station symbol\n        let hw: number = this.stationShapeRadius;\n        // half the height of the entire station symbol\n        let hh: number = node.nLines * this.stationShapeRadius;\n\n        // observe the bounding box edge on the right\n        if (node.x > this.w - hw - this.padding.right) {\n            node.x = this.w - hw - this.padding.right;\n        }\n\n        // observe the bounding box edge on the left\n        if (node.x < 0 + hw + this.padding.left) {\n            node.x = 0 + hw + this.padding.left;\n        }\n\n        // observe the bounding box edge on the top\n        if (node.y > this.h - hh - this.labelSpaceVert) {\n            node.y = this.h - hh - this.labelSpaceVert;\n        }\n\n        // observe the bounding box edge on the bottom\n        if (node.y < 0 + hh + this.labelSpaceVert) {\n            node.y = 0 + hh + this.labelSpaceVert;\n        }\n\n        return node;\n\n    }\n\n\n\n\n    /**\n     * Updates the data on the MetroChart object:\n     * <ul>\n     * <li>adds <code>this.nodes.x</code>, <code>this.nodes.y</code>,\n     * <code>this.nodes.nLines</code> for all nodes</li>\n     * <li>calculates minimum time value (<code>this.timeValueLeft</code>) and\n     * maximum time value (<code>this.timeValueRight</code>) if applicable</li>\n     * </ul>\n     *\n     * @return {MetroChart} Returns the MetroChart object with updated data\n     */\n    private verifyData(): MetroChart {\n\n\n        // set the initial position on all nodes:\n        for (let node of this.nodes) {\n            node.x = this.w / 2;\n            node.y = this.h / 2;\n            node.nLines = node.lines.length;\n            if (typeof node.time === 'undefined') {\n                // this node has no associated information that can be used\n                // to position it on a time axis\n                console.log('MetroChart: \\'No time information.\\'');\n            } else if (typeof node.time === 'number') {\n\n                if (node.time < this.timeValueLeft || typeof this.timeValueLeft === 'undefined') {\n                    this.timeValueLeft = node.time;\n                }\n                if (node.time > this.timeValueRight || typeof this.timeValueRight === 'undefined') {\n                    this.timeValueRight = node.time;\n                }\n            } else {\n                throw new MetroChartError(' in .verifyData(): \\'node.time\\'s type should be \\'number\\'.');\n            }\n        }\n        return this;\n    }\n\r\n    public updateWidthHeight() {\r\n        this.w = this.elemid.getBoundingClientRect().width;\r\n        this.h = this.elemid.getBoundingClientRect().height;\r\n    }\r\n\r\n\r\n    // getters and setters from here\n\n    /**\n    * Sets the list of colors to be used for visualizing the lines.\n    */\n    public set colors(colors: string[]) {\n        this._colors = colors;\n    }\n    public get colors():string[] {\n        return this._colors;\n    }\n\n    /**\n    * Defines whether or not to apply the time axis constraint in positioning\n    * the stations horizontally.\n    */\n    public set enableTimeAxis(enableTimeAxis: boolean) {\n        this._enableTimeAxis = enableTimeAxis;\n    }\n    public get enableTimeAxis():boolean {\n        return this._enableTimeAxis;\n    }\n\n    /**\n    * Sets the force-directed graph's charge parameter.\n    */\n    public set charge(charge: number) {\n        this._charge = charge;\n    }\n    public get charge():number {\n        return this._charge;\n    }\n\n\n    /**\n    * Sets the force-directed graph's link distance parameter.\n    */\n    public set linkDistance(linkDistance: number) {\n        this._linkDistance = linkDistance;\n    }\n    public get linkDistance():number {\n        return this._linkDistance;\n    }\n\n\n    /**\n    * Sets the force-directed graph's gravity parameter.\n    */\n    public set gravity(gravity: number) {\n        this._gravity = gravity;\n    }\n    public get gravity():number {\n        return this._gravity;\n    }\n\n    /**\n    * Sets the force-directed graph's link strength parameter.\n    */\n    public set linkStrength(linkStrength: number) {\n        this._linkStrength = linkStrength;\n    }\n    public get linkStrength():number {\n        return this._linkStrength;\n    }\n\n\n    /**\n    * Gets the url of where the data was loaded from.\n    */\n    public get url(): string {\n        return this._url;\n    }\n\n\n}\n","l":{"3":1,"9":1,"27":1,"149":1,"228":1,"231":0,"234":0,"237":0,"240":0,"242":0,"243":0,"245":0,"249":0,"252":0,"253":0,"254":0,"262":1,"265":0,"267":0,"269":0,"271":0,"282":1,"285":0,"286":0,"287":0,"289":0,"290":0,"294":0,"295":0,"298":0,"302":0,"304":0,"307":0,"312":0,"314":0,"317":0,"322":0,"324":0,"327":0,"332":0,"334":0,"337":0,"342":0,"344":0,"347":0,"352":0,"354":0,"357":0,"361":0,"363":0,"366":0,"370":0,"372":0,"375":0,"379":0,"381":0,"384":0,"389":0,"405":1,"408":0,"416":0,"419":0,"421":0,"423":0,"427":0,"429":0,"432":0,"434":0,"436":0,"440":0,"443":0,"463":1,"465":0,"466":0,"468":0,"469":0,"471":0,"472":0,"474":0,"500":1,"502":0,"503":0,"507":0,"509":0,"512":0,"513":0,"514":0,"515":0,"517":0,"533":1,"553":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"562":0,"563":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"580":0,"582":0,"591":0,"593":0,"595":0,"602":0,"618":1,"622":0,"624":0,"626":0,"630":0,"632":0,"652":1,"655":0,"656":0,"657":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"668":0,"671":0,"672":0,"682":1,"684":0,"687":0,"688":0,"689":0,"693":0,"695":0,"696":0,"713":1,"715":0,"716":0,"717":0,"719":0,"720":0,"723":0,"725":0,"727":0,"729":0,"730":0,"733":0,"745":1,"748":0,"755":0,"757":0,"761":0,"767":0,"770":0,"774":0,"775":0,"776":0,"783":0,"786":0,"787":0,"788":0,"792":0,"795":0,"796":0,"797":0,"802":0,"806":0,"812":0,"818":0,"819":0,"820":0,"821":0,"828":0,"831":0,"832":0,"833":0,"834":0,"839":0,"840":0,"845":0,"846":0,"852":0,"860":0,"861":0,"866":0,"867":0,"871":0,"874":0,"877":0,"879":0,"882":0,"884":0,"885":0,"889":0,"897":0,"900":0,"902":0,"903":0,"904":0,"905":0,"906":0,"908":0,"914":0,"918":0,"925":0,"927":0,"940":1,"943":0,"946":0,"947":0,"950":0,"970":1,"972":0,"974":0,"976":0,"978":0,"980":0,"982":0,"991":1,"995":0,"997":0,"1000":0,"1001":0,"1002":0,"1005":0,"1007":0,"1010":0,"1011":0,"1015":0,"1016":0,"1018":0,"1023":0,"1024":0,"1026":0,"1031":0,"1032":0,"1034":0,"1037":0,"1039":0,"1045":0,"1048":0,"1068":1,"1071":0,"1073":0,"1076":0,"1077":0,"1081":0,"1082":0,"1086":0,"1087":0,"1091":0,"1092":0,"1095":0,"1113":1,"1117":0,"1118":0,"1119":0,"1120":0,"1121":0,"1124":0,"1125":0,"1127":0,"1128":0,"1130":0,"1131":0,"1134":0,"1137":0,"1140":1,"1141":0,"1142":0,"1151":1,"1152":0,"1155":0,"1162":1,"1163":0,"1166":0,"1172":1,"1173":0,"1176":0,"1183":1,"1184":0,"1187":0,"1194":1,"1195":0,"1198":0,"1204":1,"1205":0,"1208":0,"1215":1,"1216":0,"1220":1}},
"src/metrocharterror.ts":{"path":"src/metrocharterror.ts","statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":17,"column":1}},"2":{"start":{"line":4,"column":37},"end":{"line":4,"column":42}},"3":{"start":{"line":9,"column":4},"end":{"line":16,"column":5}},"4":{"start":{"line":12,"column":8},"end":{"line":12,"column":23}},"5":{"start":{"line":14,"column":8},"end":{"line":14,"column":38}},"6":{"start":{"line":15,"column":8},"end":{"line":15,"column":31}},"7":{"start":{"line":17,"column":0},"end":{"line":17,"column":1}},"8":{"start":{"line":4,"column":13},"end":{"line":17,"column":1}}},"fnMap":{"1":{"name":"(anonymous_70)","line":4,"loc":{"start":{"line":4,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"MetroChartError","line":9,"loc":{"start":{"line":9,"column":4},"end":{"line":9,"column":31}}}},"branchMap":{},"s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":1},"b":{},"f":{"1":1,"2":0},"code":"/*\n * Not sure why the {@link MetroChartError} class works like it does\n */\nexport class MetroChartError extends Error {\r\n\n    public message : string;\n    public name    : string;\n\n    constructor(message: string) {\n\n        // call the super class (Error)'s constructor:\n        super(message);\n\n        this.name = 'MetroChartError';\n        this.message = message;\n    }\n}\n","l":{"4":1,"9":1,"12":0,"14":0,"15":0,"17":1}}}
